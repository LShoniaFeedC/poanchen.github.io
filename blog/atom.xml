<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Poan (Baron) Chen's Blog</title>
  <link href="https://poanchen.github.io/blog/atom.xml" rel="self"/>
  <link href="https://poanchen.github.io/blog"/>
  <updated>2017-05-13T23:41:44-07:00</updated>
  <id>https://poanchen.github.io/blog</id>
  <author>
    <name>Poan (Baron) Chen</name>
    <email>chen.baron@hotmail.com</email>
  </author>
  
    <entry>
      <title>How to set up password authentication with Apache on Ubuntu 14.04</title>
      <link href="https://poanchen.github.io/blog/2017/05/07/how-to-set-up-password-authentication-with-apache-on-ubuntu-1404"/>
      <updated>2017-05-07T00:00:00-07:00</updated>
      <id>https://poanchen.github.io//blog/2017/05/07/how-to-set-up-password-authentication-with-apache-on-ubuntu-1404</id>
      <content type="html">&lt;p&gt;When setting up a web server, there are often sections of the site that you wish to restrict access to. In order to restrict access to a certain page, a password-authentication will be used. In this guide, we will demonstrate how to password protect assets on an Apache web server running on Ubuntu 14.04.&lt;/p&gt;

&lt;p&gt;First, you need to install the Apache Utilities Package.  &lt;a href=&quot;https://github.com/poanchen/code-for-blog/blob/master/2017/05/07/how-to-set-up-password-authentication-with-apache-on-ubuntu-1404/commands.sh&quot; target=&quot;_blank&quot;&gt;source code&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;
  &lt;code class=&quot;bash&quot;&gt;
    sudo apt-get update
    sudo apt-get install apache2 apache2-utils
  &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Next, you need to create the password file for the Apache Utilities to use.  &lt;a href=&quot;https://github.com/poanchen/code-for-blog/blob/master/2017/05/07/how-to-set-up-password-authentication-with-apache-on-ubuntu-1404/commands.sh&quot; target=&quot;_blank&quot;&gt;source code&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;
  &lt;code class=&quot;bash&quot;&gt;
    sudo htpasswd -c /etc/apache2/.htpasswd username
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;You will be asked to supply and confirm a password for the user you just created.&lt;/p&gt;

&lt;p&gt;You may view the username and encrypted password for each user:  &lt;a href=&quot;https://github.com/poanchen/code-for-blog/blob/master/2017/05/07/how-to-set-up-password-authentication-with-apache-on-ubuntu-1404/commands.sh&quot; target=&quot;_blank&quot;&gt;source code&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;
  &lt;code class=&quot;bash&quot;&gt;
    cat /etc/apache2/.htpasswd
  &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Next, all you need to do is to configure the Apache file for the access control.  &lt;a href=&quot;https://github.com/poanchen/code-for-blog/blob/master/2017/05/07/how-to-set-up-password-authentication-with-apache-on-ubuntu-1404/commands.sh&quot; target=&quot;_blank&quot;&gt;source code&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;
  &lt;code class=&quot;bash&quot;&gt;
    sudo vi /etc/apache2/sites-enabled/000-default.conf
  &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Add the following code to your Apache config file.  &lt;a href=&quot;https://github.com/poanchen/code-for-blog/blob/master/2017/05/07/how-to-set-up-password-authentication-with-apache-on-ubuntu-1404/000-default-le-ssl.conf&quot; target=&quot;_blank&quot;&gt;source code&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;
  &lt;code class=&quot;bash&quot;&gt;
    &amp;lt;Directory /path/to/protect&amp;gt;
      Options Indexes FollowSymLinks
      AllowOverride All
      Require all granted
    &amp;lt;/Directory&amp;gt;
  &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Now, you need to restart your Apache web server for it to take effect.  &lt;a href=&quot;https://github.com/poanchen/code-for-blog/blob/master/2017/05/07/how-to-set-up-password-authentication-with-apache-on-ubuntu-1404/commands.sh&quot; target=&quot;_blank&quot;&gt;source code&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;
  &lt;code class=&quot;bash&quot;&gt;
    sudo service apache2 restart
  &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;To confirm that your content is protected, try to access your restricted content in a web browser. A login widget should pop up.&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;Hopefully this guide has helped you to solve your problem of adding simple password authentication using Apache Utilities. I hope that this tutorial has helped you and thank you for reading!&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;p&gt;I’ll try to keep this list current and up to date. If you know of a great resource you’d like to share or notice a broken link, please &lt;a href=&quot;https://github.com/poanchen&quot;&gt;get in touch&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;getting-started&quot;&gt;Getting started&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-set-up-password-authentication-with-apache-on-ubuntu-14-04&quot;&gt;How To Set Up Password Authentication with Apache on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>
  
    <entry>
      <title>How to check if an image already existed in wp-content/upload directory?</title>
      <link href="https://poanchen.github.io/blog/2017/04/10/how-to-check-if-an-image-already-existed-in-wp-content-upload-directory"/>
      <updated>2017-04-10T00:00:00-07:00</updated>
      <id>https://poanchen.github.io//blog/2017/04/10/how-to-check-if-an-image-already-existed-in-wp-content-upload-directory</id>
      <content type="html">&lt;p&gt;If you have never play with WordPress, your first thought might be using file_exists(path) in PHP, which is perfectly fine. However, the way how WordPress organize their uploaded pictures is by their month of upload time. For example, say today is April, 10, 2017 and you just uploaded a picture named example.png. In WordPress, it will be stored in /wp-content/upload/2017/04/example.png with three other different sizes for thumbnail, medium and large size. If you were to use file_exists(path) in PHP, you would need to look for it recursively. And, here is how WordPress would really help you to solve this problem quickly. Every time, when an user upload an image through the WordPress back-end system. The image info will be stored in the database. So, to check if an image is already uploaded in wp-content/upload directory, we can simply make a database query.&lt;/p&gt;

&lt;p&gt;Here is the function that will try to find the image, if it does exist then it will return the image post id. Otherwise, a null will be return.  &lt;a href=&quot;https://github.com/poanchen/code-for-blog/blob/master/2017/04/10/how-to-check-if-an-image-already-existed-in-wp-content-upload-directory/does-file-exists-sample.php&quot; target=&quot;_blank&quot;&gt;source code&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;
  &lt;code class=&quot;php&quot;&gt;
    function does_file_exists($filename) {
      global $wpdb;
      
      return intval( $wpdb-&amp;gt;get_var( &quot;SELECT post_id FROM {$wpdb-&amp;gt;postmeta} WHERE meta_value LIKE '%/$filename'&quot; ) );
    }
  &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;We can now use this function to check if an image exist in the server.  &lt;a href=&quot;https://github.com/poanchen/code-for-blog/blob/master/2017/04/10/how-to-check-if-an-image-already-existed-in-wp-content-upload-directory/does-file-exists-sample.php&quot; target=&quot;_blank&quot;&gt;source code&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;
  &lt;code class=&quot;php&quot;&gt;
    if ( null == ( $thumb_id = does_file_exists( 'example.png' ) ) ) {
      // hummm....seems like we have never seen this file name before, let's do an upload
    } else {
      // nice...the image already exist!!!
    }
  &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Now, with this function, you may check if an image exist in the server or not.&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;Hopefully this guide has helped you to solve your problem of checking if an image is already uploaded in the server. I hope that this tutorial has helped you and thank you for reading!&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;p&gt;I’ll try to keep this list current and up to date. If you know of a great resource you’d like to share or notice a broken link, please &lt;a href=&quot;https://github.com/poanchen&quot;&gt;get in touch&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;getting-started&quot;&gt;Getting started&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.w3schools.com/php/func_filesystem_file_exists.asp&quot;&gt;file_exists()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://codex.wordpress.org/Using_Images&quot;&gt;Using Images&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>
  
    <entry>
      <title>How to set up pretty url in WordPress?</title>
      <link href="https://poanchen.github.io/blog/2017/04/02/how-to-set-up-pretty-url-in-wordpress"/>
      <updated>2017-04-02T00:00:00-07:00</updated>
      <id>https://poanchen.github.io//blog/2017/04/02/how-to-set-up-pretty-url-in-wordpress</id>
      <content type="html">&lt;p&gt;If you have ever play with WordPress, you would know that WordPress is a pretty powerful CMS that allows you to do a lot of cool things. For example, in the setting, you may choose what kind of permalink you want for your url. It can be something like this “https://www.example.com/?p=123” or it can be something like this “https://www.example.com/sample-post/”. For many good reasons, the second one is more preferable to user. Reason like it looks more pretty and it is good for SEO. However, sometimes you may run into issue that you tried to set it to Post name (the second one that we just discussed) and when you head over to the page, you receive “Not Found” error message on your browser. This is because you may have not setup correctly in the &lt;a href=&quot;https://httpd.apache.org/&quot;&gt;Apache&lt;/a&gt;. Today, I am going to walk you through it and help you to fix that “Not Found” error message.&lt;/p&gt;

&lt;p&gt;Firstable, assuming that you have access to your web server and logged in as administrator. Otherwise, you might not be able to do the following tutorial. Let’s do it!&lt;/p&gt;

&lt;p&gt;For WordPress to use pretty url in permalink, you need to enable mod_rewrite. To do that, first you need to run this command to enable it.&lt;/p&gt;

&lt;pre&gt;
  &lt;code class=&quot;bash&quot;&gt;
    sudo a2enmod rewrite
  &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Next, you need to make sure your Apache conf file allow you to rewrite as well. Do these commands.&lt;/p&gt;

&lt;pre&gt;
  &lt;code class=&quot;bash&quot;&gt;
    cd /etc/apache2/sites-enabled
    sudo vi [name of your conf file].conf
  &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Then, vi will open up the conf file and you may view your setting for your web server. Try adding the following line to your conf file.&lt;/p&gt;

&lt;pre&gt;
  &lt;code class=&quot;bash&quot;&gt;
    &amp;lt;Directory /var/www&amp;gt;
      AllowOverride All
    &amp;lt;/Directory&amp;gt;
  &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Next, in order for Apache to take effect, you need to restart your Apache server.&lt;/p&gt;

&lt;pre&gt;
  &lt;code class=&quot;bash&quot;&gt;
    sudo service apache2 restart
  &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Now, when you head over to your WordPress site. You should be able to properly see your site without the “Not Found” error message.&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;Hopefully this guide has helped you to fix the “Not Found” error message and finally, the visitor may see your site with a pretty url. Yaa!! I hope that this tutorial has helped you and thank you for reading!&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;p&gt;I’ll try to keep this list current and up to date. If you know of a great resource you’d like to share or notice a broken link, please &lt;a href=&quot;https://github.com/poanchen&quot;&gt;get in touch&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;getting-started&quot;&gt;Getting started&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://codex.wordpress.org/Using_Permalinks&quot;&gt;Using Permalinks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wordpress.org/&quot;&gt;WordPress&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>
  
    <entry>
      <title>How to build a search page in Django with Amazon Dynamodb and React? Part 2 (Front-end)</title>
      <link href="https://poanchen.github.io/blog/2016/12/09/how-to-build-a-search-page-in-django-with-amazon-dynamodb-and-react-p2-front-end"/>
      <updated>2016-12-09T00:00:00-08:00</updated>
      <id>https://poanchen.github.io//blog/2016/12/09/how-to-build-a-search-page-in-django-with-amazon-dynamodb-and-react-p2-front-end</id>
      <content type="html">&lt;p&gt;Before we begin, If you have not yet read the post about how to build a search page in Django with Amazon Dynamodb and React? Part 1, then please read &lt;a href=&quot;/blog/2016/12/06/how-to-build-a-search-page-in-django-with-amazon-dynamodb-and-react-p1-back-end&quot;&gt;this&lt;/a&gt; before you carry on. In this tutorial, we will be mainly focus on using React to make the front-end of the search page. Also, we will be discussing on how we approach to the solution using two different ways. Long story short, the big differences of two would be that one is filtering in the client side, and another one is filtering in the server side. Let’s discuss about the first way in this tutorial. In the first way, we will be using filter to remove those person who does not meet the requirments. For example, say a user lives in New York right now and the user is interested in learning what are the names of the billionaire who currently lives in New York, NY as well. Then, React will comes in handy. Let’s begin to write some code in React. Here, we will be implementing the search.html (where we left off from part 1 tutorial). Here is the code from part 1. (unchanged)&lt;/p&gt;

&lt;h2 id=&quot;original-code-of-searchhtml-in-part-1&quot;&gt;Original code of search.html in part 1&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;html&quot;&gt;
    &amp;#123;% for billionaire in billionaires %&amp;#125;
      &amp;#123;&amp;#123; billionaire.first_name &amp;#125;&amp;#125; &amp;#123;&amp;#123; billionaire.last_name &amp;#125;&amp;#125;&amp;lt;br&amp;gt;
      &amp;#123;&amp;#123; billionaire.source_of_wealth &amp;#125;&amp;#125;&amp;lt;br&amp;gt;
      &amp;#123;&amp;#123; billionaire.current_location &amp;#125;&amp;#125;&amp;lt;br&amp;gt;
      &amp;#123;&amp;#123; billionaire.net_worth &amp;#125;&amp;#125;&amp;lt;br&amp;gt;
      &amp;lt;br&amp;gt;
    &amp;#123;% endfor %&amp;#125;
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Then, we need to modify the code so that we are using React way to represent the information. Before, we do anything. We first try to print the hello world in React way. And, here is how we are doing it.&lt;/p&gt;

&lt;h2 id=&quot;hello-world-version-of-react-code-nbspnbspa-hrefhttpsgithubcompoanchencode-for-blogblobmaster20161209how-to-build-a-search-page-in-django-with-amazon-dynamodb-and-react-p2-front-endhello-world-in-react-wayhtml-targetblanksource-codea&quot;&gt;Hello World version of React code   &lt;a href=&quot;https://github.com/poanchen/code-for-blog/blob/master/2016/12/09/how-to-build-a-search-page-in-django-with-amazon-dynamodb-and-react-p2-front-end/hello-world-in-react-way.html&quot; target=&quot;_blank&quot;&gt;source code&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;html&quot;&gt;
    &amp;lt;script src=&quot;https://unpkg.com/react@15/dist/react.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;https://unpkg.com/react-dom@15/dist/react-dom.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.34/browser.js&quot;&amp;gt;&amp;lt;/script&amp;gt;

    &amp;lt;div id='react-container'&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;script type=&quot;text/babel&quot;&amp;gt;
      var ListOfBillionaire = React.createClass({
        render() {
          return (
            &amp;lt;p&amp;gt;
              Hello World
            &amp;lt;/p&amp;gt;
          )
        }
      })
      ReactDOM.render(&amp;lt;ListOfBillionaire /&amp;gt;,
        document.getElementById('react-container'))
    &amp;lt;/script&amp;gt;
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Pretty simple hul! Then, we simply need to pass the data from Django controller to React. But, before we do that. We probably need to modify the back-end code a little bit in order for it to work. In the views.py from the part 1, there is a method called get_list_of_tutors and we need to make sure that @variables items is a JSON when it is return. We may simply do something like this.&lt;/p&gt;

&lt;h2 id=&quot;modify-the-viewspy-a-little-bit-so-that-the-getlistoftutors-returns-as-a-json-nbspnbspa-hrefhttpsgithubcompoanchencode-for-blogblobmaster20161209how-to-build-a-search-page-in-django-with-amazon-dynamodb-and-react-p2-front-endmodified-viewspy-targetblanksource-codea&quot;&gt;Modify the views.py a little bit so that the get_list_of_tutors returns as a JSON   &lt;a href=&quot;https://github.com/poanchen/code-for-blog/blob/master/2016/12/09/how-to-build-a-search-page-in-django-with-amazon-dynamodb-and-react-p2-front-end/modified-views.py&quot; target=&quot;_blank&quot;&gt;source code&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;python&quot;&gt;
    import json
    ...
    ...
    ...
    def get_list_of_tutors(param):
    ...
    ...
    ...
      if response['ResponseMetadata']['HTTPStatusCode'] == 200:
        try:
          item = response['Item']
        except KeyError:
          return None
        return json.dumps(items, indent=4)
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;That is it. Then, now we may easily treat it as JSON for the @variable billionaires and pass it to React. But, before we do that, let’s try to see if we can print out the JSON billionaires in JavaScript.&lt;/p&gt;

&lt;h2 id=&quot;print-out-the-json-billionaires-in-javascript&quot;&gt;Print out the JSON billionaires in JavaScript&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;html&quot;&gt;
    &amp;lt;script src=&quot;https://unpkg.com/react@15/dist/react.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;https://unpkg.com/react-dom@15/dist/react-dom.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.34/browser.js&quot;&amp;gt;&amp;lt;/script&amp;gt;

    &amp;lt;div id='react-container'&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;script type=&quot;text/babel&quot;&amp;gt;
      var listOfBillionaireFromDB = &amp;#123;&amp;#123; billionaires|safe &amp;#125;&amp;#125;;
      console.log(listOfBillionaireFromDB);
      var ListOfBillionaire = React.createClass({
        render() {
          return (
            &amp;lt;p&amp;gt;
              Hello World
            &amp;lt;/p&amp;gt;
          )
        }
      })
      ReactDOM.render(&amp;lt;ListOfBillionaire /&amp;gt;,
        document.getElementById('react-container'))
    &amp;lt;/script&amp;gt;
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;You should be able to see the array print out in the console and when you look into it. The data for each billionaire should show up. Then, we simply need to pass the @variable listOfBillionaireFromDB to React. So that we can print out all the billionaire information from the database.&lt;/p&gt;

&lt;h2 id=&quot;pass-data-to-react&quot;&gt;Pass data to React&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;html&quot;&gt;
    &amp;lt;script src=&quot;https://unpkg.com/react@15/dist/react.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;https://unpkg.com/react-dom@15/dist/react-dom.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.34/browser.js&quot;&amp;gt;&amp;lt;/script&amp;gt;

    &amp;lt;div id='react-container'&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;script type=&quot;text/babel&quot;&amp;gt;
      var listOfBillionaireFromDB = &amp;#123;&amp;#123; billionaires|safe &amp;#125;&amp;#125;;
      var ListOfBillionaire = React.createClass({
        getInitialState() {
          return {
            ListOfBillionaireFromDB : listOfBillionaireFromDB
          }
        },
        render() {
          return (
            &amp;lt;p&amp;gt;
              Hello World
            &amp;lt;/p&amp;gt;
          )
        }
      })
      ReactDOM.render(&amp;lt;ListOfBillionaire /&amp;gt;,
        document.getElementById('react-container'))
    &amp;lt;/script&amp;gt;
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now, we have stored the JSON to the @variable ListOfBillionaireFromDB. If you need to access it, you can simply do this in React, this.state.ListOfBillionaireFromDB Let’s try to print out all the billionaire information that just looked like before.&lt;/p&gt;

&lt;h2 id=&quot;print-out-all-the-billionaire-information&quot;&gt;Print out all the billionaire information&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;html&quot;&gt;
    &amp;lt;script src=&quot;https://unpkg.com/react@15/dist/react.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;https://unpkg.com/react-dom@15/dist/react-dom.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.34/browser.js&quot;&amp;gt;&amp;lt;/script&amp;gt;

    &amp;lt;div id='react-container'&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;script type=&quot;text/babel&quot;&amp;gt;
      var listOfBillionaireFromDB = &amp;#123;&amp;#123; billionaires|safe &amp;#125;&amp;#125;;
      var ListOfBillionaire = React.createClass({
        getInitialState() {
          return {
            ListOfBillionaireFromDB : listOfBillionaireFromDB
          }
        },
        eachPerson(person, index) {
          return (
            &amp;lt;p key={ index }&amp;gt;
              { person.first_name } { person.last_name }&amp;lt;br/&amp;gt;
              { person.source_of_wealth }&amp;lt;br/&amp;gt;
              { person.current_location }&amp;lt;br/&amp;gt;
              { person.net_worth }&amp;lt;br/&amp;gt;
            &amp;lt;/p&amp;gt;
          )
        },
        render() {
          return (
            &amp;lt;div&amp;gt;
              { this.state.ListOfBillionaireFromDB.map(this.eachPerson) }
            &amp;lt;/div&amp;gt;
          )
        }
      })
      ReactDOM.render(&amp;lt;ListOfBillionaire /&amp;gt;,
        document.getElementById('react-container'))
    &amp;lt;/script&amp;gt;
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Then, we probably need to add a dropdown menu on the top so that user may easily filter to what they want. Let’s do that first.&lt;/p&gt;

&lt;h2 id=&quot;react-code-for-the-dropdown-menu&quot;&gt;React code for the dropdown menu&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;html&quot;&gt;
    &amp;lt;div id='react-container-locations-dropdown'&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;script type=&quot;text/babel&quot;&amp;gt;
      var CurrentLocation = React.createClass({
        getInitialState() {
          return {
            locations: [
              {
                'name' : 'Seattle, WA'
              },
              {
                'name' : 'Omaha, NE'
              },
              {
                'name' : 'Wichita, KS'
              },
              {
                'name' : 'Woodside, CA'
              },
              {
                'name' : 'Medina, WA'
              },
              {
                'name' : 'New York, NY'
              },
              {
                'name' : 'La Coruna, Spain'
              },
              {
                'name' : 'Palo Alto, CA'
              },
              {
                'name' : 'Mexico City, Mexico'
              }
            ],
            selectedLocation : 'Seattle, WA'
          }        
        },
        update(e) {
          this.setState({ selectedLocation : e.target.value });
        },
        eachLocation(location, index) {
          return (&amp;lt;option key={ index }&amp;gt;{ location.name }&amp;lt;/option&amp;gt;)
        },
        render() {
          return (
            &amp;lt;select value={ this.state.selectedLocation }
                    onChange={ this.update }&amp;gt;
              { this.state.locations.map(this.eachLocation) }
            &amp;lt;/select&amp;gt;
          )
        }
      })
      ReactDOM.render(&amp;lt;CurrentLocation /&amp;gt;,
        document.getElementById('react-container-locations-dropdown'))
    &amp;lt;/script&amp;gt;
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;When you combine them together, you should see something like this.&lt;/p&gt;

&lt;h2 id=&quot;screenshots-of-the-dropdown-menu-with-the-list-of-unfiltered-billionaire&quot;&gt;Screenshots of the dropdown menu with the list of unfiltered billionaire&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016/12/09/how-to-build-a-search-page-in-django-with-amazon-dynamodb-and-react-p2-front-end/dropdown menu with the list of unfiltered billionaire.PNG&quot; alt=&quot;An example of dropdown menu with the list of unfiltered billionaire&quot; /&gt;&lt;br /&gt;
Right now, if you try to select different city, the list does not change at all. Let’s use the filter so that it actually changes too according to the user’s selection. Before, we do that, let’s try to combine the ReactDOM of CurrentLocation and ListOfBillionaire so that they are all in the same ReactDOM. Something like this.&lt;/p&gt;

&lt;h2 id=&quot;full-code-of-combined-react-code-nbspnbspa-hrefhttpsgithubcompoanchencode-for-blogblobmaster20161209how-to-build-a-search-page-in-django-with-amazon-dynamodb-and-react-p2-front-endcombined-reactdom-code-for-both-dropdownhtml-targetblanksource-codea&quot;&gt;Full code of combined React code   &lt;a href=&quot;https://github.com/poanchen/code-for-blog/blob/master/2016/12/09/how-to-build-a-search-page-in-django-with-amazon-dynamodb-and-react-p2-front-end/combined-ReactDOM-code-for-both-dropdown.html&quot; target=&quot;_blank&quot;&gt;source code&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;html&quot;&gt;
    &amp;lt;script src=&quot;https://unpkg.com/react@15/dist/react.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;https://unpkg.com/react-dom@15/dist/react-dom.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.34/browser.js&quot;&amp;gt;&amp;lt;/script&amp;gt;

    &amp;lt;div id='react-container'&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;script type=&quot;text/babel&quot;&amp;gt;
      var listOfBillionaireFromDB = &amp;#123;&amp;#123; billionaires|safe &amp;#125;&amp;#125;;
      var ListOfBillionaire = React.createClass({
        getInitialState() {
          return {
            ListOfBillionaireFromDB : listOfBillionaireFromDB,
            locations: [
              {
                'name' : 'Seattle, WA'
              },
              {
                'name' : 'Omaha, NE'
              },
              {
                'name' : 'Wichita, KS'
              },
              {
                'name' : 'Woodside, CA'
              },
              {
                'name' : 'Medina, WA'
              },
              {
                'name' : 'New York, NY'
              },
              {
                'name' : 'La Coruna, Spain'
              },
              {
                'name' : 'Palo Alto, CA'
              },
              {
                'name' : 'Mexico City, Mexico'
              }
            ],
            selectedLocation : 'Seattle, WA'
          }
        },
        update(e) {
          this.setState({ selectedLocation : e.target.value });
        },
        eachLocation(location, index) {
          return (&amp;lt;option key={ index }&amp;gt;{ location.name }&amp;lt;/option&amp;gt;)
        },
        eachPerson(person, index) {
          return (
            &amp;lt;p key={ index }&amp;gt;
              { person.first_name } { person.last_name }&amp;lt;br/&amp;gt;
              { person.source_of_wealth }&amp;lt;br/&amp;gt;
              { person.current_location }&amp;lt;br/&amp;gt;
              { person.net_worth }&amp;lt;br/&amp;gt;
            &amp;lt;/p&amp;gt;
          )
        },
        render() {
          return (
            &amp;lt;div&amp;gt;
              &amp;lt;select value={ this.state.selectedLocation }
                      onChange={ this.update }&amp;gt;
                { this.state.locations.map(this.eachLocation) }
              &amp;lt;/select&amp;gt;
              { this.state.ListOfBillionaireFromDB.map(this.eachPerson) }
            &amp;lt;/div&amp;gt;
          )
        }
      })
      ReactDOM.render(&amp;lt;ListOfBillionaire /&amp;gt;,
        document.getElementById('react-container'))
    &amp;lt;/script&amp;gt;
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Whenever there is a change of dropdown, the list of people should be changed as well. Thanks to React! Here is the code that does that.&lt;/p&gt;

&lt;h2 id=&quot;full-code-for-dropdown-filter-for-location-of-the-billionaire-nbspnbspa-hrefhttpsgithubcompoanchencode-for-blogblobmaster20161209how-to-build-a-search-page-in-django-with-amazon-dynamodb-and-react-p2-front-endfilter-location-in-react-wayhtml-targetblanksource-codea&quot;&gt;Full code for dropdown filter for location of the billionaire   &lt;a href=&quot;https://github.com/poanchen/code-for-blog/blob/master/2016/12/09/how-to-build-a-search-page-in-django-with-amazon-dynamodb-and-react-p2-front-end/filter-location-in-react-way.html&quot; target=&quot;_blank&quot;&gt;source code&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;html&quot;&gt;
    &amp;lt;script src=&quot;https://unpkg.com/react@15/dist/react.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;https://unpkg.com/react-dom@15/dist/react-dom.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.34/browser.js&quot;&amp;gt;&amp;lt;/script&amp;gt;

    &amp;lt;div id='react-container'&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;script type=&quot;text/babel&quot;&amp;gt;
      var listOfBillionaireFromDB = &amp;#123;&amp;#123; billionaires|safe &amp;#125;&amp;#125;;
      var ListOfBillionaire = React.createClass({
        getInitialState() {
          return {
            ListOfBillionaireFromDB : listOfBillionaireFromDB,
            locations: [
              {
                'name' : 'Seattle, WA'
              },
              {
                'name' : 'Omaha, NE'
              },
              {
                'name' : 'Wichita, KS'
              },
              {
                'name' : 'Woodside, CA'
              },
              {
                'name' : 'Medina, WA'
              },
              {
                'name' : 'New York, NY'
              },
              {
                'name' : 'La Coruna, Spain'
              },
              {
                'name' : 'Palo Alto, CA'
              },
              {
                'name' : 'Mexico City, Mexico'
              }
            ],
            selectedLocation : 'Seattle, WA',
            showedBillionaire : listOfBillionaireFromDB.filter(billionaire =&amp;gt; billionaire.current_location == 'Seattle, WA')
          }
        },
        update(e) {
          this.setState({ selectedLocation : e.target.value });
          var filteredBillionaire = this.state.ListOfBillionaireFromDB.filter(billionaire =&amp;gt; billionaire.current_location == e.target.value)
          this.setState({ showedBillionaire : filteredBillionaire });
        },
        eachLocation(location, index) {
          return (&amp;lt;option key={ index }&amp;gt;{ location.name }&amp;lt;/option&amp;gt;)
        },
        eachPerson(person, index) {
          return (
            &amp;lt;p key={ index }&amp;gt;
              { person.first_name } { person.last_name }&amp;lt;br/&amp;gt;
              { person.source_of_wealth }&amp;lt;br/&amp;gt;
              { person.current_location }&amp;lt;br/&amp;gt;
              { person.net_worth }&amp;lt;br/&amp;gt;
            &amp;lt;/p&amp;gt;
          )
        },
        render() {
          return (
            &amp;lt;div&amp;gt;
              &amp;lt;select value={ this.state.selectedLocation }
                      onChange={ this.update }&amp;gt;
                { this.state.locations.map(this.eachLocation) }
              &amp;lt;/select&amp;gt;
              { this.state.showedBillionaire.map(this.eachPerson) }
            &amp;lt;/div&amp;gt;
          )
        }
      })
      ReactDOM.render(&amp;lt;ListOfBillionaire /&amp;gt;,
        document.getElementById('react-container'))
    &amp;lt;/script&amp;gt;
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;As you may see, in the update method, everytime when there is a change in the dropdown, then we simply filter it to make sure that it only shows the relevant billionaire. Here is what it looks like.&lt;/p&gt;

&lt;h2 id=&quot;demo-on-how-the-dropdown-filter-works-for-location&quot;&gt;Demo on how the dropdown filter works for location&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016/12/09/how-to-build-a-search-page-in-django-with-amazon-dynamodb-and-react-p2-front-end/demo on how the dropdown filter works.gif&quot; alt=&quot;A demo on how the dropdown filter works&quot; /&gt;&lt;br /&gt;
Now, let’s try to add the filter for the net worth as well. Here is the code.&lt;/p&gt;

&lt;h2 id=&quot;full-code-for-dropdown-filter-for-net-worth-and-location-of-the-billionaire-nbspnbspa-hrefhttpsgithubcompoanchencode-for-blogblobmaster20161209how-to-build-a-search-page-in-django-with-amazon-dynamodb-and-react-p2-front-endfilter-in-react-way-full-codehtml-targetblanksource-codea&quot;&gt;Full code for dropdown filter for net worth and location of the billionaire   &lt;a href=&quot;https://github.com/poanchen/code-for-blog/blob/master/2016/12/09/how-to-build-a-search-page-in-django-with-amazon-dynamodb-and-react-p2-front-end/filter-in-react-way-full-code.html&quot; target=&quot;_blank&quot;&gt;source code&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;html&quot;&gt;
    &amp;lt;script src=&quot;https://unpkg.com/react@15/dist/react.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;https://unpkg.com/react-dom@15/dist/react-dom.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.34/browser.js&quot;&amp;gt;&amp;lt;/script&amp;gt;

    &amp;lt;div id='react-container'&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;script type=&quot;text/babel&quot;&amp;gt;
      var listOfBillionaireFromDB = &amp;#123;&amp;#123; billionaires|safe &amp;#125;&amp;#125;;
      var ListOfBillionaire = React.createClass({
        getInitialState() {
          return {
            ListOfBillionaireFromDB : listOfBillionaireFromDB,
            locations: [
              {
                'name' : 'Seattle, WA'
              },
              {
                'name' : 'Omaha, NE'
              },
              {
                'name' : 'Wichita, KS'
              },
              {
                'name' : 'Woodside, CA'
              },
              {
                'name' : 'Medina, WA'
              },
              {
                'name' : 'New York, NY'
              },
              {
                'name' : 'La Coruna, Spain'
              },
              {
                'name' : 'Palo Alto, CA'
              },
              {
                'name' : 'Mexico City, Mexico'
              }
            ],
            netWorth: [
              {
                'value' : 85
              },
              {
                'value' : 75
              },
              {
                'value' : 65
              },
              {
                'value' : 55
              },
              {
                'value' : 45
              },
              {
                'value' : 40
              },
              {
                'value' : 35
              }
            ],
            selectedLocation : 'Seattle, WA',
            selectedNetWorth : 85,
            showedBillionaire : listOfBillionaireFromDB.filter(billionaire =&amp;gt; billionaire.current_location == 'Seattle, WA' &amp;amp;&amp;amp; billionaire.net_worth &amp;lt; 85)
          }
        },
        updateForLocation(e) {
          var net_worth_in_number = parseInt(this.state.selectedNetWorth.split(' ')[3].split('B')[0]);
          this.setState({ selectedLocation : e.target.value });
          var filteredBillionaire = this.state.ListOfBillionaireFromDB.filter(billionaire =&amp;gt; billionaire.current_location == e.target.value &amp;amp;&amp;amp; billionaire.net_worth &amp;lt; net_worth_in_number)
          this.setState({ showedBillionaire : filteredBillionaire });
        },
        updateForNetWorth(e) {
          var net_worth_in_number = parseInt(e.target.value.split(' ')[3].split('B')[0]);
          this.setState({ selectedNetWorth : e.target.value });
          var filteredBillionaire = this.state.ListOfBillionaireFromDB.filter(billionaire =&amp;gt; billionaire.net_worth &amp;lt; net_worth_in_number &amp;amp;&amp;amp; billionaire.current_location == this.state.selectedLocation)
          this.setState({ showedBillionaire : filteredBillionaire });
        },
        eachLocation(location, index) {
          return (&amp;lt;option key={ index }&amp;gt;{ location.name }&amp;lt;/option&amp;gt;)
        },
        eachNetWorth(netWorth, index) {
          return (&amp;lt;option key={ index }&amp;gt;Net worth under { netWorth.value }B&amp;lt;/option&amp;gt;)
        },
        eachPerson(person, index) {
          return (
            &amp;lt;p key={ index }&amp;gt;
              { person.first_name } { person.last_name }&amp;lt;br/&amp;gt;
              { person.source_of_wealth }&amp;lt;br/&amp;gt;
              { person.current_location }&amp;lt;br/&amp;gt;
              { person.net_worth }&amp;lt;br/&amp;gt;
            &amp;lt;/p&amp;gt;
          )
        },
        render() {
          return (
            &amp;lt;div&amp;gt;
              &amp;lt;select value={ this.state.selectedNetWorth }
                      onChange={ this.updateForNetWorth }&amp;gt;
                { this.state.netWorth.map(this.eachNetWorth) }
              &amp;lt;/select&amp;gt;
              &amp;lt;select value={ this.state.selectedLocation }
                      onChange={ this.updateForLocation }&amp;gt;
                { this.state.locations.map(this.eachLocation) }
              &amp;lt;/select&amp;gt;
              { this.state.showedBillionaire.map(this.eachPerson) }
            &amp;lt;/div&amp;gt;
          )
        }
      })
      ReactDOM.render(&amp;lt;ListOfBillionaire /&amp;gt;,
        document.getElementById('react-container'))
    &amp;lt;/script&amp;gt;
  &lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;demo-on-how-the-dropdown-filter-works-for-net-worth-and-location&quot;&gt;Demo on how the dropdown filter works for net worth and location&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016/12/09/how-to-build-a-search-page-in-django-with-amazon-dynamodb-and-react-p2-front-end/demo on how the dropdown filter works for net worth and location.gif&quot; alt=&quot;A demo on how the dropdown filter works for net worth and location&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;Hopefully this guide has given you the confidence to do the filter in React way. The other way that uses the server side filtering will be discussed in the next part. Anyways, I hope that this tutorial has helped you and thank you for reading!&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;p&gt;I’ll try to keep this list current and up to date. If you know of a great resource you’d like to share or notice a broken link, please &lt;a href=&quot;https://github.com/poanchen&quot;&gt;get in touch&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;getting-started&quot;&gt;Getting started&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2016/12/06/how-to-build-a-search-page-in-django-with-amazon-dynamodb-and-react-p1-back-end&quot;&gt;How to build a search page in Django with Amazon Dynamodb and React? Part 1 (Back-end)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/facebook/react&quot;&gt;Source code of React&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;react&quot;&gt;React&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://scotch.io/tutorials/learning-react-getting-started-and-concepts&quot;&gt;Learning React.js: Getting Started and Concepts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://facebook.github.io/react/docs/hello-world.html&quot;&gt;React for beginner&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://facebook.github.io/react/tutorial/tutorial.html&quot;&gt;Intro to React&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>
  
    <entry>
      <title>How to build a search page in Django with Amazon Dynamodb and React? Part 1 (Back-end)</title>
      <link href="https://poanchen.github.io/blog/2016/12/06/how-to-build-a-search-page-in-django-with-amazon-dynamodb-and-react-p1-back-end"/>
      <updated>2016-12-06T00:00:00-08:00</updated>
      <id>https://poanchen.github.io//blog/2016/12/06/how-to-build-a-search-page-in-django-with-amazon-dynamodb-and-react-p1-back-end</id>
      <content type="html">&lt;p&gt;Hello everyone, I thought that by creating this tutorial about how to build a search page in &lt;a href=&quot;https://www.djangoproject.com/&quot;&gt;Django&lt;/a&gt; along with &lt;a href=&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Introduction.html&quot;&gt;Amazon Dynamodb&lt;/a&gt; and &lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React&lt;/a&gt; might help you guys to understand more about those trending technologies. First off, I would like to briefly talk about the search page. As you guys can imagine, a search page is a place where you allow user to search for what they want. For example, you would like to find a billionaire whose net worth is under 50 Billion and currently lives in Palo Alto, CA. For simplicity, we will be ignoring on how you would set up a Django environment in your own computer. If you have not done so, please go to &lt;a href=&quot;https://docs.djangoproject.com/en/1.10/intro/install/&quot;&gt;here&lt;/a&gt;. Also, we will be skipping on how to set up Amazon dynamodb as well. If you have trouble with setting up for Amazon Dynamodb, please go to &lt;a href=&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/SampleData.CreateTables.html&quot;&gt;here&lt;/a&gt; for more detailed instruction. Now, before we do anything, we should fill in some dummy datas into the database for us to use later. Here is what the data looks like in the database.&lt;/p&gt;

&lt;h2 id=&quot;screenshots-of-dummy-data-in-the-database&quot;&gt;Screenshots of dummy data in the database&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016/12/06/how-to-build-a-search-page-in-django-with-amazon-dynamodb-and-react-p1-back-end/dummy data in the database.PNG&quot; alt=&quot;An example of dummy data in the database&quot; /&gt;&lt;br /&gt;
Now, we need to add the url search into the url pattern in the Django in order for it to work like this, http://127.0.0.1:8000/search. To do that in Django, we can configure it in urls.py.&lt;/p&gt;

&lt;h2 id=&quot;add-search-url-into-the-urlspy&quot;&gt;Add search url into the urls.py&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;python&quot;&gt;
    from django.conf.urls import url

    urlpatterns = [
      # http://127.0.0.1:8000/search
      # http://127.0.0.1:8000/search/
      url(r'^search/?', views.search, name='search'),
    ]
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Then, we need to create a HTML page for search so that the search method would know which page it should render. In Django, you may simply add the HTML page in the folder named templates. If you are not familiar with templates in Django, be sure to check out this &lt;a href=&quot;https://docs.djangoproject.com/en/1.10/topics/templates/&quot;&gt;site&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;sample-of-what-the-searchhtml-looks-like&quot;&gt;Sample of what the search.html looks like&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;html&quot;&gt;
    Hello there!
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now, we may go to the views.py, this file should be side by side with the urls.py, the one you modified earlier. Add these piece of codes to notify the search method to render the search.html page.&lt;/p&gt;

&lt;h2 id=&quot;told-the-viewspy-to-render-the-searchhtml-page&quot;&gt;Told the views.py to render the search.html page&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;python&quot;&gt;
    from django.shortcuts import render
    from django.template import loader
    from django.http import HttpResponse

    # http://127.0.0.1:8000/search
    # http://127.0.0.1:8000/search/
    def search(request):
      template = loader.get_template('search.html')
      context = {}

      return HttpResponse(template.render(context, request))
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Try go to the http://127.0.0.1:8000/search and see if you can see the Hello there! If you can see it, that means that you did it correctly. If you cannot, try to turn on your debug mode and see what went wrong! Next, in order for the search page to work, we need to retrieve the value of the GET parameter from the requested url. For example, say you need to find the billionaire whose net worth is under 50 Billion, and the requested url might look something like this, http://127.0.0.1:8000/search?net_worth_under=50. Or you are interested in billionaire who is currently located in New York, then the query might look something like this, http://127.0.0.1:8000/search?current_residence=New York, NY. Here is what the method might look like in order to get the values of GET parameters.&lt;/p&gt;

&lt;h2 id=&quot;method-to-retrieve-the-value-of-the-get-parameter-from-the-requested-url&quot;&gt;Method to retrieve the value of the GET parameter from the requested url&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;python&quot;&gt;
    def retrieve_all_get_parameters(request):
      param = {}
      net_worth_under = request.GET.get('net_worth_under')
      current_residence = request.GET.get('current_residence')

      if net_worth_under != None and net_worth_under != '':
        param['net_worth_under'] = net_worth_under
      if current_residence != None and current_residence != '':
        param['current_residence'] = current_residence

      return param
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now, let’s modify the search method a little bit to see if the method retrieve_all_get_parameters is working properly.&lt;/p&gt;

&lt;h2 id=&quot;check-to-see-if-the-method-retrieveallgetparameters-is-working-properly&quot;&gt;Check to see if the method retrieve_all_get_parameters is working properly&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;python&quot;&gt;
    from django.shortcuts import render
    from django.template import loader
    from django.http import HttpResponse

    # http://127.0.0.1:8000/search
    # http://127.0.0.1:8000/search/
    def search(request):
      template = loader.get_template('search.html')
      params = retrieve_all_get_parameters(request)

      return HttpResponse(template.render(params, request))
  &lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;searchhtml&quot;&gt;search.html&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;html&quot;&gt;
    &amp;#123;&amp;#123; net_worth_under &amp;#125;&amp;#125;&amp;lt;br&amp;gt;
    &amp;#123;&amp;#123; current_residence &amp;#125;&amp;#125;
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Try type in this, http://127.0.0.1:8000/search?net_worth_under=50&amp;amp;current_residence=New York, NY and you should be able to see your result print out on the page! Once we have this, we may move to the next level. Try to implment the code in such a way that when user comes to the search page, it first returns all the billionaire from the database.&lt;/p&gt;

&lt;h2 id=&quot;made-database-connection-and-simply-return-all-the-billionaire-from-the-database&quot;&gt;Made database connection and simply return all the billionaire from the database&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;python&quot;&gt;
    def get_list_of_billionaires(param):
      try:
        table = dynamodb.Table('put_your_amazon_dynamodb_table_name_here')
      except botocore.exceptions.ClientError as e:
        # http://stackoverflow.com/questions/33068055/boto3-python-and-how-to-handle-errors
        return 'failed'
      else:
        response = table.scan()
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
          try:
            item = response['Item']
          except KeyError:
            return None
          return item
  &lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;in-method-search&quot;&gt;In method search,&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;python&quot;&gt;
    def search(request):
      template = loader.get_template('search.html')
      params = retrieve_all_get_parameters(request)
      billionaires = get_list_of_billionaires(params)
      context = {
        'billionaires' : billionaires
      }

      return HttpResponse(template.render(context, request))
  &lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;in-searchhtml&quot;&gt;In search.html,&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;html&quot;&gt;
    &amp;#123;% for billionaire in billionaires %&amp;#125;
      &amp;#123;&amp;#123; billionaire.first_name &amp;#125;&amp;#125; &amp;#123;&amp;#123; billionaire.last_name &amp;#125;&amp;#125;&amp;lt;br&amp;gt;
      &amp;#123;&amp;#123; billionaire.source_of_wealth &amp;#125;&amp;#125;&amp;lt;br&amp;gt;
      &amp;#123;&amp;#123; billionaire.current_location &amp;#125;&amp;#125;&amp;lt;br&amp;gt;
      &amp;#123;&amp;#123; billionaire.net_worth &amp;#125;&amp;#125;&amp;lt;br&amp;gt;
      &amp;lt;br&amp;gt;
    &amp;#123;% endfor %&amp;#125;
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now, when you go to http://127.0.0.1:8000/search, you should be able to see something like this.&lt;/p&gt;

&lt;h2 id=&quot;screenshots-of-printing-out-all-the-billionaire-in-the-database&quot;&gt;Screenshots of printing out all the billionaire in the database&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016/12/06/how-to-build-a-search-page-in-django-with-amazon-dynamodb-and-react-p1-back-end/sample output of all the billionaire in the database.PNG&quot; alt=&quot;Sample output of all the billionaire in the database&quot; /&gt;&lt;br /&gt;
It seems to be working fine. Now, let’s work on the filtering part in the search page. There are few ways of doing filtering with Amazon Dynamodb, we will be using scan operation as our database is consider small. In production, you should use query instead for better performace. For more information about this, go ahead and read &lt;a href=&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html&quot;&gt;this offical document&lt;/a&gt; by Amazon. First, we need to work on the filter expression that is designed for Amazon Dynamodb. Your code should look something like this.&lt;/p&gt;

&lt;h2 id=&quot;in-method-getlistofbillionaires&quot;&gt;In method get_list_of_billionaires,&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;python&quot;&gt;
    def get_list_of_billionaires(param):
      filter_expression = []
      expression_attribute_names = {}
      expression_attribute_values = {}

      try:
        net_worth_under = param['net_worth_under']
        filter_expression.append('(#net_worth &amp;lt;= :net_worth_under)')
        expression_attribute_names['#net_worth'] = 'net_worth'
        expression_attribute_values[':net_worth_under'] = net_worth_under
      except KeyError:
        pass
      try:
        current_residence = param['current_residence']
        filter_expression.append('(#l = :current_residence)')
        expression_attribute_names['#l'] = 'current_location'
        expression_attribute_values[':current_residence'] = current_residence
      except KeyError:
        pass
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So, at the end, in the array of filter_expression, we will have all the necessary query if needed. Attribute names and values are for setting the values for variables in the filter expression, so that later on, we can do the comparison operation with the query. Next, we need to write a method to combine all the query in the filter_expression with the ‘and’. For example, the query might look something like this, (#net_worth &amp;lt;= :net_worth_under) and (#l = :current_residence)&lt;/p&gt;

&lt;h2 id=&quot;method-to-combine-queries-into-one&quot;&gt;Method to combine queries into one&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;python&quot;&gt;
    def filter_expression_to_string(filter_expression):
      if not filter_expression:
        return ''
      length_of_filter_expression = len(filter_expression)
      filter_expression_to_string = ''
      for x in range(length_of_filter_expression):
        filter_expression_to_string += filter_expression[x]
        if x + 1 != length_of_filter_expression:
          filter_expression_to_string += ' and '
      return filter_expression_to_string
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Once we have this, we can easily do the filtering part by doing this.&lt;/p&gt;

&lt;h2 id=&quot;in-method-getlistofbillionaires-1&quot;&gt;In method get_list_of_billionaires,&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;python&quot;&gt;
    try:
      table = dynamodb.Table('put_your_amazon_dynamodb_table_name_here')
    except botocore.exceptions.ClientError as e:
      # http://stackoverflow.com/questions/33068055/boto3-python-and-how-to-handle-errors
      return 'failed'
    else:
      filtered_string = filter_expression_to_string(filter_expression)
      if filtered_string != '' and expression_attribute_names and expression_attribute_values:
        response = table.scan(
          FilterExpression = filtered_string,
          ExpressionAttributeNames = expression_attribute_names,
          ExpressionAttributeValues = expression_attribute_values,
        )
      else:
        response = table.scan(
          ReturnConsumedCapacity = 'TOTAL',
        )
      if response['ResponseMetadata']['HTTPStatusCode'] == 200:
        try:
          item = response['Item']
        except KeyError:
          return None
        return item
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now, your search page should be fully working. Here are some of the examples.&lt;/p&gt;

&lt;h2 id=&quot;screenshots-of-searching-for-billionaire-whose-net-worth-is-under-40-billion-and-currently-lives-in-new-york-ny&quot;&gt;Screenshots of searching for billionaire whose net worth is under 40 Billion and currently lives in New York, NY&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016/12/06/how-to-build-a-search-page-in-django-with-amazon-dynamodb-and-react-p1-back-end/search for billionaire whose net worth is under 40 Billion and currently lives in New York, NY.PNG&quot; alt=&quot;Result of billionaire whose net worth is under 40 Billion and currently lives in New York, NY&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;screenshots-of-searching-for-billionaire-whose-net-worth-is-under-51-billion&quot;&gt;Screenshots of searching for billionaire whose net worth is under 51 Billion&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016/12/06/how-to-build-a-search-page-in-django-with-amazon-dynamodb-and-react-p1-back-end/search for billionaire whose net worth is under 51 Billion.PNG&quot; alt=&quot;Result of billionaire whose net worth is under 51 Billion&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;screenshots-of-searching-for-billionaire-who-currently-lives-in-medina-wa&quot;&gt;Screenshots of searching for billionaire who currently lives in Medina, WA&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016/12/06/how-to-build-a-search-page-in-django-with-amazon-dynamodb-and-react-p1-back-end/search for billionaire who currently lives in Medina, WA.PNG&quot; alt=&quot;Result of billionaire who currently lives in Medina, WA&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;full-code-for-urlspy-nbspnbspa-hrefhttpsgithubcompoanchencode-for-blogblobmaster20161206how-to-build-a-search-page-in-django-with-amazon-dynamodb-and-react-p1-back-endurlspy-targetblanksource-codea&quot;&gt;Full code for urls.py   &lt;a href=&quot;https://github.com/poanchen/code-for-blog/blob/master/2016/12/06/how-to-build-a-search-page-in-django-with-amazon-dynamodb-and-react-p1-back-end/urls.py&quot; target=&quot;_blank&quot;&gt;source code&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;python&quot;&gt;
    from django.conf.urls import url

    urlpatterns = [
      # http://127.0.0.1:8000/search
      # http://127.0.0.1:8000/search/
      url(r'^search/?', views.search, name='search'),
    ]
  &lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;full-code-for-viewspy-nbspnbspa-hrefhttpsgithubcompoanchencode-for-blogblobmaster20161206how-to-build-a-search-page-in-django-with-amazon-dynamodb-and-react-p1-back-endviewspy-targetblanksource-codea&quot;&gt;Full code for views.py   &lt;a href=&quot;https://github.com/poanchen/code-for-blog/blob/master/2016/12/06/how-to-build-a-search-page-in-django-with-amazon-dynamodb-and-react-p1-back-end/views.py&quot; target=&quot;_blank&quot;&gt;source code&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;python&quot;&gt;
    from django.shortcuts import render
    from django.template import loader
    from django.http import HttpResponse
    from boto3.dynamodb.conditions import Key, Attr
    import boto3
    import botocore

    # dynamodb configuration
    dynamodb = boto3.resource(
      'dynamodb',
      aws_access_key_id='put_your_aws_access_key_here',
      aws_secret_access_key='put_your_aws_secret_access_key_here',
      region_name='puy_your_amazon_dynamodb_region_here')

    # http://127.0.0.1:8000/search
    # http://127.0.0.1:8000/search/
    def search(request):
      template = loader.get_template('search.html')
      params = retrieve_all_get_parameters(request)
      billionaires = get_list_of_billionaires(params)
      context = {
        'billionaires' : billionaires
      }

      return HttpResponse(template.render(context, request))

    def get_list_of_billionaires(param):
      filter_expression = []
      expression_attribute_names = {}
      expression_attribute_values = {}

      try:
        net_worth_under = param['net_worth_under']
        filter_expression.append('(#net_worth &amp;lt;= :net_worth_under)')
        expression_attribute_names['#net_worth'] = 'net_worth'
        expression_attribute_values[':net_worth_under'] = net_worth_under
      except KeyError:
        pass
      try:
        current_residence = param['current_residence']
        filter_expression.append('(#l = :current_residence)')
        expression_attribute_names['#l'] = 'current_location'
        expression_attribute_values[':current_residence'] = current_residence
      except KeyError:
        pass
      try:
        table = dynamodb.Table('put_your_amazon_dynamodb_table_name_here')
      except botocore.exceptions.ClientError as e:
        # http://stackoverflow.com/questions/33068055/boto3-python-and-how-to-handle-errors
        return 'failed'
      else:
        filtered_string = filter_expression_to_string(filter_expression)
        if filtered_string != '' and expression_attribute_names and expression_attribute_values:
          response = table.scan(
            FilterExpression = filtered_string,
            ExpressionAttributeNames = expression_attribute_names,
            ExpressionAttributeValues = expression_attribute_values,
          )
        else:
          response = table.scan(
            ReturnConsumedCapacity = 'TOTAL',
          )
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
          try:
            item = response['Item']
          except KeyError:
            return None
          return item

    def retrieve_all_get_parameters(request):
      param = {}
      net_worth_under = request.GET.get('net_worth_under')
      current_residence = request.GET.get('current_residence')

      if net_worth_under != None and net_worth_under != '':
        param['net_worth_under'] = net_worth_under
      if current_residence != None and current_residence != '':
        param['current_residence'] = current_residence

      return param

    def filter_expression_to_string(filter_expression):
      if not filter_expression:
        return ''
      length_of_filter_expression = len(filter_expression)
      filter_expression_to_string = ''
      for x in range(length_of_filter_expression):
        filter_expression_to_string += filter_expression[x]
        if x + 1 != length_of_filter_expression:
          filter_expression_to_string += ' and '
      return filter_expression_to_string
  &lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;full-code-for-searchhtml-nbspnbspa-hrefhttpsgithubcompoanchencode-for-blogblobmaster20161206how-to-build-a-search-page-in-django-with-amazon-dynamodb-and-react-p1-back-endsearchhtml-targetblanksource-codea&quot;&gt;Full code for search.html   &lt;a href=&quot;https://github.com/poanchen/code-for-blog/blob/master/2016/12/06/how-to-build-a-search-page-in-django-with-amazon-dynamodb-and-react-p1-back-end/search.html&quot; target=&quot;_blank&quot;&gt;source code&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;html&quot;&gt;
    &amp;#123;% for billionaire in billionaires %&amp;#125;
      &amp;#123;&amp;#123; billionaire.first_name &amp;#125;&amp;#125; &amp;#123;&amp;#123; billionaire.last_name &amp;#125;&amp;#125;&amp;lt;br&amp;gt;
      &amp;#123;&amp;#123; billionaire.source_of_wealth &amp;#125;&amp;#125;&amp;lt;br&amp;gt;
      &amp;#123;&amp;#123; billionaire.current_location &amp;#125;&amp;#125;&amp;lt;br&amp;gt;
      &amp;#123;&amp;#123; billionaire.net_worth &amp;#125;&amp;#125;&amp;lt;br&amp;gt;
      &amp;lt;br&amp;gt;
    &amp;#123;% endfor %&amp;#125;
  &lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;Hopefully this guide has given you the confidence to do the scan operation in Amazon Dynamodb and see how it works with the Django under the hood. I hope that this tutorial has helped you and thank you for reading!&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;p&gt;I’ll try to keep this list current and up to date. If you know of a great resource you’d like to share or notice a broken link, please &lt;a href=&quot;https://github.com/poanchen&quot;&gt;get in touch&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;getting-started&quot;&gt;Getting started&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.djangoproject.com/&quot;&gt;Django&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/dynamodb&quot;&gt;Introduction of Amazon Dynamodb&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Introduction.html&quot;&gt;Amazon Dynamodb&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://scotch.io/tutorials/learning-react-getting-started-and-concepts&quot;&gt;Learning React.js: Getting Started and Concepts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/facebook/react&quot;&gt;Source code of React&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;django&quot;&gt;Django&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.djangoproject.com/en/1.10/intro/install/&quot;&gt;Install Django&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.djangoproject.com/en/1.10/topics/templates/&quot;&gt;Templates in Django&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;amazon-dynamodb&quot;&gt;Amazon Dynamodb&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/SampleData.CreateTables.html&quot;&gt;Set up Amazon Dynamodb&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html&quot;&gt;Query and Scan Operations in DynamoDB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>
  
    <entry>
      <title>How to enable cross-origin resource sharing on an apache server?</title>
      <link href="https://poanchen.github.io/blog/2016/11/20/how-to-enable-cross-origin-resource-sharing-on-an-apache-server"/>
      <updated>2016-11-20T00:00:00-08:00</updated>
      <id>https://poanchen.github.io//blog/2016/11/20/how-to-enable-cross-origin-resource-sharing-on-an-apache-server</id>
      <content type="html">&lt;p&gt;Today, I am going to show you guys how to enable cross-origin resource sharing on an apache server. Before we start, I would like to ask you a question. Have you ever come cross this error message while development? To be more specific, here is what the error message might look like.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016/11/20/how-to-enable-cross-origin-resource-sharing-on-an-apache-server/example of error message for cors.PNG&quot; alt=&quot;An example of error message of CORS&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;If yes, then you are in luck. By following this tutorial, you may solve this problem. So, what exactly is cross-origin resource sharing? &lt;a href=&quot;https://www.w3.org/TR/cors/&quot;&gt;Cross-origin resource sharing (CORS)&lt;/a&gt; is a mechanism that allows restricted resources (e.g. file) on a web page to be requested from another domain outside the domain from which the resource originated. For example, a HTML page served from http://www.domain-a.com makes a &amp;lt;img&amp;gt; src request for http://www.domain-b.com. For security reasons, browsers restrict cross-origin HTTP requests initiated from within scripts. For example, in the error message shown above, the script in HTML was trying to make a XMLHttpRequest and Fetch some JSON from domain namely the https://www.jenrenalcare.com. However, the HTML page was served from https://s.codepen.io. As we know, a web application using XMLHttpRequest or Fetch could only make HTTP requests to its own domain. So, how do we solve this in the server side? Here are the steps that what you should do.
First, change directory to where you put your apache conf file.&lt;/p&gt;

&lt;h2 id=&quot;command-to-change-directory-to-apache-conf-file&quot;&gt;command to change directory to apache conf file&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;bash&quot;&gt;
    cd /etc/apache2/sites-enabled
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Then, you need to have administrator access or sudo to modify the apache conf file. Then do the following commands,&lt;/p&gt;

&lt;h2 id=&quot;command-to-vi-the-apache-conf-file&quot;&gt;command to vi the apache conf file&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;bash&quot;&gt;
    sudo vi [name of your conf file].conf
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Then, add the following lines to your code.&lt;/p&gt;

&lt;h2 id=&quot;apache-code-for-enable-the-cors-nbspnbspa-hrefhttpsgithubcompoanchencode-for-blogblobmaster20161120how-to-enable-cross-origin-resource-sharing-on-an-apache-server000-default-le-sslconf-targetblanksource-codea&quot;&gt;apache code for enable the CORS   &lt;a href=&quot;https://github.com/poanchen/code-for-blog/blob/master/2016/11/20/how-to-enable-cross-origin-resource-sharing-on-an-apache-server/000-default-le-ssl.conf&quot; target=&quot;_blank&quot;&gt;source code&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;apache&quot;&gt;
    # remember to replace /var/www with your directory root
    &amp;lt;Directory /var/www&amp;gt;
      # some other apache code here, if any
      # replace the url to the one you wanted
      Header set Access-Control-Allow-Origin &quot;https://s.codepen.io&quot;
      # some other apache code here, if any
    &amp;lt;/Directory&amp;gt;
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Simple hul!? Now, you may simply save the file and quit. Then, in fact, for Header to work in apache, we need to run the following command.&lt;/p&gt;

&lt;h2 id=&quot;command-to-enable-header-for-apache&quot;&gt;command to enable Header for apache&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;bash&quot;&gt;
    sudo a2enmod headers
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now, we are left with only one command to make it work. We simple need to restart the apache!&lt;/p&gt;

&lt;h2 id=&quot;restart-your-apache2-server&quot;&gt;restart your Apache2 server&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;html&quot;&gt;
    sudo service apache2 restart
  &lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;Hopefully this guide has given you the confidence to fix the CORS problem on the server side when you see them. I hope that this tutorial has helped you and thank you for reading!&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;p&gt;I’ll try to keep this list current and up to date. If you know of a great resource you’d like to share or notice a broken link, please &lt;a href=&quot;https://github.com/poanchen&quot;&gt;get in touch&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;getting-started&quot;&gt;Getting started&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-origin_resource_sharing&quot;&gt;Cross-origin resource sharing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>
  
    <entry>
      <title>How to play mp4 video using hls.js?</title>
      <link href="https://poanchen.github.io/blog/2016/11/17/how-to-play-mp4-video-using-hls"/>
      <updated>2016-11-17T00:00:00-08:00</updated>
      <id>https://poanchen.github.io//blog/2016/11/17/how-to-play-mp4-video-using-hls</id>
      <content type="html">&lt;p&gt;Today, I am going to show you guys how to play mp4 video using &lt;a href=&quot;https://github.com/dailymotion/hls.js/tree/master&quot;&gt;hls.js&lt;/a&gt;. hls.js is a JavaScript library which implements a HTTP Live Streaming client. It relies on HTML5 video and MediaSource Extensions for playback. What is great about hls.js is that it does not need any player, it works directly on top of a standard HTML &amp;lt;video&amp;gt; element. (assuming your browser supported it, check &lt;a href=&quot;http://caniuse.com/#search=MediaSource&quot;&gt;here&lt;/a&gt;). So, how does hls.js works? It works by breaking the overall stream into a sequence of small HTTP-based file downloads, each download loading one short chunk of an overall stream. As the stream is played, it will continue on requesting more short chunk of the overall stream. And, how does it know what file name it should download? Since, initially, the video will be load from a m3u8 file where it contains the metadata of the video itself. You may think it as a playlist. By simply looking at them, hls.js would know which file should download next while playing. Couple of the advantages of using HLS is that it works faster than &lt;a href=&quot;http://www.adobe.com/ca/products/flashplayer.html&quot;&gt;Flash&lt;/a&gt;, it is supported by &lt;a href=&quot;http://caniuse.com/#search=MediaSource&quot;&gt;many browser&lt;/a&gt; these days, and it unlocks the potential to stream live in 4k and 60 fps. This is an example of how a m3u8 file would look like.&lt;/p&gt;

&lt;h2 id=&quot;sample-m3u8-file-when-the-video-is-named-samplemp4&quot;&gt;sample m3u8 file when the video is named sample.mp4&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;java&quot;&gt;
    #EXTM3U
    #EXT-X-VERSION:3
    #EXT-X-TARGETDURATION:11
    #EXT-X-MEDIA-SEQUENCE:0
    #EXTINF:10.023222,
    sample0.ts
    #EXTINF:10.000000,
    sample1.ts
    #EXTINF:10.000000,
    sample2.ts
    #EXTINF:10.000000,
    sample3.ts
    #EXTINF:10.000000,
    sample4.ts
    #EXTINF:10.000000,
    sample5.ts
    #EXTINF:10.000000,
    sample6.ts
    #EXTINF:10.000000,
    sample7.ts
    #EXTINF:10.000000,
    sample8.ts
    #EXTINF:7.800000,
    sample9.ts
    #EXT-X-ENDLIST
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;As you can see, the first chunk of the overall stream is sample0.ts and follow by sample1.ts. In this way, hls.js would know which ts file to be played next. Now, before we dive right into the code. We first need to convert the mp4 video to m3u8 format in order to use the HLS technologies. There are many great tools that can do this. We are going to use the &lt;a href=&quot;https://linux.die.net/man/1/ffmpeg&quot;&gt;command line with ffmpeg&lt;/a&gt; by &lt;a href=&quot;https://www.ffmpeg.org/&quot;&gt;ffmpeg&lt;/a&gt;. And, I will be using ffmpeg in command line to convert the video from mp4 to m3u8. If you do not have ffmpeg installed, please go to this StackOverflow &lt;a href=&quot;http://stackoverflow.com/questions/29125229/how-to-reinstall-ffmpeg-clean-on-ubuntu-14-04&quot;&gt;thread&lt;/a&gt; for more instruction on how to install on Ubuntu. Say, I have a mp4 video file named sample.mp4 and I would like to name my m3u8 file as sample.m3u8. Then, I may simply do this command to convert the mp4 video to m3u8 format.&lt;/p&gt;

&lt;h2 id=&quot;command-on-how-to-convert-mp4-video-to-m3u8-format-using-ffmpeg&quot;&gt;command on how to convert mp4 video to m3u8 format using ffmpeg&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;bash&quot;&gt;
    ffmpeg -i sample.mp4 -profile:v baseline -level 3.0 -s 840x560 -start_number 0 -hls_list_size 0 -f hls sample.m3u8
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Notice that I set the resolution of video to 840x560. Please refer to this &lt;a href=&quot;https://linux.die.net/man/1/ffmpeg&quot;&gt;site&lt;/a&gt; if you are interested in other size. When you hit the ENTER button, it should begin for conversion and it might look something similar like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016/11/17/how-to-play-mp4-video-using-hls/Converting to m3u8 from mp4.PNG&quot; alt=&quot;Converting to m3u8 from mp4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Wait for it to be finished (it might take some time depends on the size of your video and machine specs). When it is done, you should see bunch of ts file like sample0.ts, sample1.ts, and sample.m3u8. This means that you have successfully convert your mp4 file to m3u8 format. Now, when we have all these. We can dive right into how to use hls.js to play m3u8 file. We first need to include the hls.js from the CDN.&lt;/p&gt;

&lt;h2 id=&quot;including-hlsjs-library-code-from-jsdelivr-cdn&quot;&gt;Including hls.js library code from jsdelivr CDN&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;html&quot;&gt;
    &amp;lt;script src=&quot;//cdn.jsdelivr.net/hls.js/latest/hls.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now, we need to add the &amp;lt;div&amp;gt; element with video as id so that the JavaScript would know where to put the video.&lt;/p&gt;

&lt;h2 id=&quot;adding-div-element-with-video-as-id-with-controls&quot;&gt;Adding div element with video as id with controls&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;html&quot;&gt;
    &amp;lt;video id=&quot;video&quot; controls&amp;gt;&amp;lt;/video&amp;gt;
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Then, we need to write the JavaScript code that use the hls.js library to play the video.&lt;/p&gt;

&lt;h2 id=&quot;play-m3u8-playlist-using-hlsjs-library&quot;&gt;Play m3u8 playlist using hls.js library&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;html&quot;&gt;
    &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
      var video = document.getElementById(&quot;video&quot;);
      var videoSrcHls = &quot;https://www.jenrenalcare.com/upload/poanchen.github.io/sample-code/2016/11/17/how-to-play-mp4-video-using-hls/sample.m3u8&quot;;

      if(Hls.isSupported()) {
        var hls = new Hls();
        hls.loadSource(videoSrcHls);
        hls.attachMedia(video);
        hls.on(Hls.Events.MANIFEST_PARSED,function() {
          video.play();
        });
      }
    &amp;lt;/script&amp;gt;
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In the code, we first check if the browser is HLS supported, then we initialize the Hls instance, and load it with the path where you put your m3u8 file. Later, we simply play the video. So that, when user comes to the site, the video will be automatically played. However, what happen when the browser does not support HLS? We should do this as fallback as it is a good practice.&lt;/p&gt;

&lt;h2 id=&quot;added-the-fallback-when-users-browser-does-not-support-hls&quot;&gt;Added the fallback when user’s browser does not support HLS&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;html&quot;&gt;
    &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
      var video = document.getElementById(&quot;video&quot;);
      var videoSrcInHls = &quot;https://www.jenrenalcare.com/upload/poanchen.github.io/sample-code/2016/11/17/how-to-play-mp4-video-using-hls/sample.m3u8&quot;;
      var videoSrcInMp4 = &quot;https://www.jenrenalcare.com/upload/poanchen.github.io/sample-code/2016/11/17/how-to-play-mp4-video-using-hls/sample.mp4&quot;;

      if(Hls.isSupported()) {
        var hls = new Hls();
        hls.loadSource(videoSrcInHls);
        hls.attachMedia(video);
        hls.on(Hls.Events.MANIFEST_PARSED,function() {
          video.play();
        });
      }else{
        addSourceToVideo(video, videoSrcInMp4, 'video/mp4');
        video.play();
      }

      function addSourceToVideo(element, src, type) {
        var source = document.createElement('source');
        source.src = src;
        source.type = type;
        element.appendChild(source);
      }
    &amp;lt;/script&amp;gt;
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now, even if the browser happen to not support hls, user may still be able to watch the video. If you would like to see the live demo, please visit &lt;a href=&quot;https://www.jenrenalcare.com/upload/poanchen.github.io/sample-code/2016/11/17/how-to-play-mp4-video-using-hls/playM3u8UsingHlsJs.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;full-code-for-playm3u8usinghlsjshtml-nbspnbspa-hrefhttpsgithubcompoanchencode-for-blogblobmaster20161117how-to-play-mp4-video-using-hlsplaym3u8usinghlsjshtml-targetblanksource-codea&quot;&gt;Full code for playM3u8UsingHlsJs.html   &lt;a href=&quot;https://github.com/poanchen/code-for-blog/blob/master/2016/11/17/how-to-play-mp4-video-using-hls/playM3u8UsingHlsJs.html&quot; target=&quot;_blank&quot;&gt;source code&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;html&quot;&gt;
    &amp;lt;script src=&quot;//cdn.jsdelivr.net/hls.js/latest/hls.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;video id=&quot;video&quot; controls&amp;gt;&amp;lt;/video&amp;gt;

    &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
      var video = document.getElementById(&quot;video&quot;);
      var videoSrcInHls = &quot;https://www.jenrenalcare.com/upload/poanchen.github.io/sample-code/2016/11/17/how-to-play-mp4-video-using-hls/sample.m3u8&quot;;
      var videoSrcInMp4 = &quot;https://www.jenrenalcare.com/upload/poanchen.github.io/sample-code/2016/11/17/how-to-play-mp4-video-using-hls/sample.mp4&quot;;

      if(Hls.isSupported()) {
        var hls = new Hls();
        hls.loadSource(videoSrcInHls);
        hls.attachMedia(video);
        hls.on(Hls.Events.MANIFEST_PARSED,function() {
          video.play();
        });
      }else{
        addSourceToVideo(video, videoSrcInMp4, 'video/mp4');
        video.play();
      }

      function addSourceToVideo(element, src, type) {
        var source = document.createElement('source');
        source.src = src;
        source.type = type;
        element.appendChild(source);
      }
    &amp;lt;/script&amp;gt;
  &lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;Hopefully this guide has given you the confidence to play around with hls.js. I hope that this tutorial has helped you and thank you for reading!&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;p&gt;I’ll try to keep this list current and up to date. If you know of a great resource you’d like to share or notice a broken link, please &lt;a href=&quot;https://github.com/poanchen&quot;&gt;get in touch&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;getting-started&quot;&gt;Getting started&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://ffmpeg.org/ffmpeg-all.html#hls&quot;&gt;ffmpeg command option reference1&lt;/a&gt; by &lt;a href=&quot;http://ffmpeg.org/&quot;&gt;ffmpeg&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://linux.die.net/man/1/ffmpeg&quot;&gt;ffmpeg command option reference2&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/30912542/mp4-to-hls-using-ffmpeg&quot;&gt;ffmpeg command help&lt;/a&gt; by &lt;a href=&quot;http://stackoverflow.com/users/2489973/budthapa&quot;&gt;budthapa&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/HTTP_Live_Streaming&quot;&gt;HTTP Live Streaming&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.peer5.com/http-live-streaming-in-javascript/&quot;&gt;HTTP Live Streaming In Javascript&lt;/a&gt; by &lt;a href=&quot;http://blog.peer5.com/author/shachar-zohar/&quot;&gt;Shachar Zohar&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>
  
    <entry>
      <title>How to add background music in Processing 3.0?</title>
      <link href="https://poanchen.github.io/blog/2016/11/15/how-to-add-background-music-in-processing-3.0"/>
      <updated>2016-11-15T00:00:00-08:00</updated>
      <id>https://poanchen.github.io//blog/2016/11/15/how-to-add-background-music-in-processing-3.0</id>
      <content type="html">&lt;p&gt;Today, I am going to show you guys how to add background music in &lt;a href=&quot;https://processing.org/&quot;&gt;Processing 3.0&lt;/a&gt;. Processing is a flexible software sketchbook and a language for learning how to code within the context of the visual arts. One of the aims of Processing is to allow non-programmers to start computer programming aided by visual feedback. As Processing is a fairly simple programming language that uses simplified syntax and a graphics user interface, some of the visual art school in Canada actually uses Processing to teach their students (who has no prior knowledge in programming) how to make things with code in an arts-oriented approach. I have to say that Processing is a very powerful tool and you can do a lot of really interesting things with it. Some of the amazing works by people around the world can be seen &lt;a href=&quot;https://processing.org/exhibition/&quot;&gt;here&lt;/a&gt;. Pretty much anything you can think of visually, you can do it in Processing. The sky’s the limit. If you haven’t already, install &lt;a href=&quot;https://processing.org/download/&quot;&gt;Processing 3.0&lt;/a&gt; before we continue on. Now, we can begin.&lt;/p&gt;

&lt;h2 id=&quot;processing-code-to-start-with&quot;&gt;Processing code to start with&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;java&quot;&gt;
    //runs once when the app first starts
    void setup() {
    }

    //runs all the time, this is the main app loop
    void draw() {
    }
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If you are new to Processing, there are two functions that are very important in Processing. One is setup and another one is draw. Think of setup as an one-time pad. It will only be called/runned once unless you restart the application. Draw is a function that will be consistently called/runned during the application and will continually to be running unless you terminate your program. Think of it as a while loop that does not break. Now, in order to add audio in Processing 3.0. We need to use a library called Sound by &lt;a href=&quot;https://processingfoundation.org/&quot;&gt;The Processing Foundation&lt;/a&gt;. Here are the steps to get it up and running.&lt;br /&gt;&lt;br /&gt;
First, you need to have your Processing software open,&lt;br /&gt;
Second, go to Sketch-&amp;gt;Import Library-&amp;gt;Add Library. Then, a Contribution Manager window should pop up.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016/11/15/how-to-add-background-music-in-processing-3.0/how to add library.png&quot; alt=&quot;How to add library&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Third, in the filter input box, type in “Sound” and select install and wait for a few moments.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016/11/15/how-to-add-background-music-in-processing-3.0/install the library.png&quot; alt=&quot;Install the library&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And then, once it is installed completely. Close the window and lets add few lines of code to see if it is actually working.&lt;/p&gt;

&lt;h2 id=&quot;processing-code-to-see-if-the-sound-is-actually-working&quot;&gt;Processing code to see if the Sound is actually working&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;java&quot;&gt;
    //right above the setup function, add the following code
    import processing.sound.*;
    
    SoundFile file;
    //replace the sample.mp3 with your audio file name here
    String audioName = &quot;sample.mp3&quot;;
    String path;
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Just like any other programming language, you need to import the library before you can use it. Here, for simplicity, add your audio/mp3 file within the same folder as your sketch_XXXXXXXX.pde file.&lt;/p&gt;

&lt;h2 id=&quot;processing-code-to-add-the-audio&quot;&gt;Processing code to add the audio&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;java&quot;&gt;
    //runs once when the app first starts
    void setup() {
      // for more info about sketchPath, go to https://processing.org/discourse/beta/num_1229443269.html
      path = sketchPath(audioName);
      file = new SoundFile(this, path);
      file.play();
    }
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now, when you run the application, you should hear your audio playing in the background. Pretty simple hul?! In the future tutorial, I will be teaching you guys how to draw simple things with Processing. Here is the full code to the solution.&lt;/p&gt;

&lt;h2 id=&quot;full-processing-code-to-play-audio-in-the-background-nbspnbspa-hrefhttpsgithubcompoanchencode-for-blogblobmaster20161115how-to-add-background-music-in-processing-30backgroundmusicpde-targetblanksource-codea&quot;&gt;Full Processing code to play audio in the background   &lt;a href=&quot;https://github.com/poanchen/code-for-blog/blob/master/2016/11/15/how-to-add-background-music-in-processing-3.0/backgroundMusic.pde&quot; target=&quot;_blank&quot;&gt;source code&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;java&quot;&gt;
    import processing.sound.*;
    
    SoundFile file;
    //put your audio file name here
    String audioName = &quot;sample.mp3&quot;;
    String path;

    //runs once when the app first starts
    void setup() {
      // for more info about sketchPath, go to https://processing.org/discourse/beta/num_1229443269.html
      path = sketchPath(audioName);
      file = new SoundFile(this, path);
      file.play();
    }

    //runs all the time, this is the main app loop
    void draw() {
    }
  &lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;Hopefully this guide has given you the confidence to start building really simple things with Processing. I hope that this tutorial has helped you and thank you for reading!&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;p&gt;I’ll try to keep this list current and up to date. If you know of a great resource you’d like to share or notice a broken link, please &lt;a href=&quot;https://github.com/poanchen&quot;&gt;get in touch&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;getting-started&quot;&gt;Getting started&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://processing.org/reference/&quot;&gt;Processing documentation&lt;/a&gt; by &lt;a href=&quot;https://processing.org/&quot;&gt;Processing&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;example-of-processing-work&quot;&gt;Example of Processing work&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/poanchen/try-to-avoid-PPAP-game&quot;&gt;PPAP game developed with Processing&lt;/a&gt; by &lt;a href=&quot;https://github.com/poanchen&quot;&gt;poanchen&lt;/a&gt; and Mandy.&lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>
  
    <entry>
      <title>How to take screenshots at different screen sizes using CasperJS?</title>
      <link href="https://poanchen.github.io/blog/2016/11/12/how-to-take-screenshots-at-different-screen-sizes-using-casperjs"/>
      <updated>2016-11-12T00:00:00-08:00</updated>
      <id>https://poanchen.github.io//blog/2016/11/12/how-to-take-screenshots-at-different-screen-sizes-using-casperjs</id>
      <content type="html">&lt;p&gt;Today, I am going to show you guys how to take screenshots at different screen sizes using &lt;a href=&quot;http://casperjs.org/&quot;&gt;CasperJS&lt;/a&gt;. To make it more fun, we are going to take a screenshots on different device with variety screen sizes. For example, iPhone 4s, iPhone 5, iPhone 6, iPad mini 4, Desktop 720p, and Desktop 1080p. Also, to make this script more useful, the urls that we will be getting the screenshots are from a file that may contains as many urls as you want. I believe this script will be useful for QA to test their site to see what will their site looks like on different device. If you haven’t already, install &lt;a href=&quot;http://casperjs.org/&quot;&gt;CasperJS&lt;/a&gt; or &lt;a href=&quot;http://phantomjs.org/&quot;&gt;PhantomJS&lt;/a&gt; before we continue on. Now, let’s dive right in.&lt;/p&gt;

&lt;h2 id=&quot;casperjs-code-screenshotsjs-to-start-with&quot;&gt;CasperJS code (screenshots.js) to start with&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;javascript&quot;&gt;
    var casper = require(&quot;casper&quot;).create();
    var fs = require('fs');
    var urls = [];
    var inputFile;
    var contents;
    var contentsToJSON;

    if (casper.cli.has(0)) {
      inputFile = casper.cli.get(0).toLowerCase();
    }else{
      casper.echo(&quot;No file passed, aborting...&quot;).exit();
    }
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The code will simply tried to see if user provide an input file, otherwise, it will simply throws error and abort. Next things is, we need to get all the urls from the input file.&lt;/p&gt;

&lt;h2 id=&quot;casperjs-code-screenshotsjs-to-get-the-contents-from-the-input-file&quot;&gt;CasperJS code (screenshots.js) to get the contents from the input file&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;javascript&quot;&gt;
    contents = fs.read(inputFile);
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now, the @variable should have the contents of the file when you execute like this, $ casperjs screenshots.js urls.json. Of course, the urls.json should look something like this.&lt;/p&gt;

&lt;h2 id=&quot;what-the-urlsjson-looks-like-nbspnbspa-hrefhttpsgithubcompoanchencode-for-blogblobmaster20161112how-to-take-screenshots-at-different-screen-sizes-using-casperjsurlsjson-targetblanksource-codea&quot;&gt;What the urls.json looks like   &lt;a href=&quot;https://github.com/poanchen/code-for-blog/blob/master/2016/11/12/how-to-take-screenshots-at-different-screen-sizes-using-casperjs/urls.json&quot; target=&quot;_blank&quot;&gt;source code&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;json&quot;&gt;
    {
      &quot;links&quot;: [
        {
          &quot;url&quot;: &quot;http://www.example.com&quot;
        },
        {
          &quot;url&quot;: &quot;http://www.example.net&quot;
        }
      ]
    }
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now, what we are having in the @variable contents is a string. But, it is not so much helpful for us because it is a string and we need to get the urls from it. As a result, we need to use the JSON.parse to convert the string to JSON, so that JavaScript can read it.&lt;/p&gt;

&lt;h2 id=&quot;casperjs-code-screenshotsjs-to-use-jsonparse-to-read-the-urls-from-the-variable-contents&quot;&gt;CasperJS code (screenshots.js) to use JSON.parse to read the urls from the @variable contents&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;javascript&quot;&gt;
    contentsToJSON = JSON.parse(contents);

    var listOfLinks = contentsToJSON.links;
    listOfLinks.forEach(function (currentValue, index, arr) {
      urls.push({url: currentValue.url});
    });
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now the @variable urls should have all the urls from the input file. Now, we need to open each url. This is how we are going to do.&lt;/p&gt;

&lt;h2 id=&quot;casperjs-code-screenshotsjs-to-open-each-url&quot;&gt;CasperJS code (screenshots.js) to open each url&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;javascript&quot;&gt;
    casper.start().each(urls, function(self, link) {
      self.thenOpen(link.url, function() {
        this.echo(&quot;url: &quot; + link.url + &quot; has been opened!&quot;);
      });
    });

    casper.run();
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;A sample of the output of this would look something like this.&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;/img/2016/11/12/how-to-take-screenshots-at-different-screen-sizes-using-casperjs/outputFromOpenedUrls.PNG&quot; alt=&quot;Output from the opened urls&quot; /&gt;&lt;br /&gt;
&lt;br /&gt;
Now that each urls has been open, we need to set the height and width for different screen size. So that we can take a screenshot for different size of screen later. Notice that we will be including device like iPhone 4s, iPhone 5, iPhone 6, iPad mini 4, Desktop 720p, and Desktop 1080p. And, the code will look something like this.&lt;/p&gt;

&lt;h2 id=&quot;casperjs-code-screenshotsjs-for-different-device-at-different-screen-size&quot;&gt;CasperJS code (screenshots.js) for different device at different screen size&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;javascript&quot;&gt;
    var viewports = [
      {
        'name': 'Apple-iPhone-4s-portrait',
        'viewport': {width: 320, height: 480}
      },
      {
        'name': 'Apple-iPhone-4s-landscape',
        'viewport': {width: 480, height: 320}
      },
      {
        'name': 'Apple-iPhone-5-portrait',
        'viewport': {width: 320, height: 568}
      },
      {
        'name': 'Apple-iPhone-5-landscape',
        'viewport': {width: 568, height: 320}
      },
      {
        'name': 'Apple-iPhone-6-portrait',
        'viewport': {width: 540, height: 960}
      },
      {
        'name': 'Apple-iPhone-6-landscape',
        'viewport': {width: 960, height: 540}
      },
      {
        'name': 'Apple-iPad-mini-4-portrait',
        'viewport': {width: 768, height: 1024}
      },
      {
        'name': 'Apple-iPad-mini-4-landscape',
        'viewport': {width: 1024, height: 768}
      },
      {
        'name': 'Desktop-720p-HD',
        'viewport': {width: 1280, height: 720}
      },
      {
        'name': 'Desktop-1080p-HD',
        'viewport': {width: 1920, height: 1080}
      }
    ];
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This will be the list of width and height for different device at different screen size. And, now we have this. We can try to take a screenshot on different device for each url that we opened.&lt;/p&gt;

&lt;h2 id=&quot;casperjs-code-screenshotsjs-for-taking-screenshot-for-different-device-for-each-url-that-we-opened&quot;&gt;CasperJS code (screenshots.js) for taking screenshot for different device for each url that we opened&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;javascript&quot;&gt;
    casper.start().each(urls, function(self, link) {
      self.thenOpen(link.url, function() {
        var folderPath = 'screenshots/' + link.url.split('//')[1].split('/')[0] + '/';
        console.log(&quot;Taking screenshot for the url &quot; + link.url + &quot;...&quot;)
        viewports.forEach(function (currentValue) {
          console.log('Screenshot for ' + currentValue.name + ' (' + currentValue.viewport.width + 'x' + currentValue.viewport.height + ')', 'info');
          self.viewport(currentValue.viewport.width, currentValue.viewport.height);
          self.capture(folderPath + currentValue.name + '-' + currentValue.viewport.width + 'x' + currentValue.viewport.height + '.png', {
            top: 0,
            left: 0,
            width: currentValue.viewport.width,
            height: currentValue.viewport.height
          });
        });
      });
    });
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;A sample of the output of this would look something like this.&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;/img/2016/11/12/how-to-take-screenshots-at-different-screen-sizes-using-casperjs/outputFromTakingScreenshotsForEachUrl.PNG&quot; alt=&quot;Output from taking screenshots for each opened url&quot; /&gt;&lt;br /&gt;&lt;br /&gt;
Now, when you run the code like this, $ casperjs screenshots.js urls.json, you should see screenshots has been taken for each url that we opened on different device. To be more clear, the full code for screenshots.js is as follows.&lt;/p&gt;

&lt;h2 id=&quot;casperjs-code-screenshotsjs-for-taking-screenshot-for-different-device-for-each-url-that-we-opened-nbspnbspa-hrefhttpsgithubcompoanchencode-for-blogblobmaster20161112how-to-take-screenshots-at-different-screen-sizes-using-casperjsscreenshotsjs-targetblanksource-codea&quot;&gt;CasperJS code (screenshots.js) for taking screenshot for different device for each url that we opened   &lt;a href=&quot;https://github.com/poanchen/code-for-blog/blob/master/2016/11/12/how-to-take-screenshots-at-different-screen-sizes-using-casperjs/screenshots.js&quot; target=&quot;_blank&quot;&gt;source code&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;javascript&quot;&gt;
    var casper = require(&quot;casper&quot;).create();
    var fs = require('fs');
    var urls = [];
    var inputFile;
    var contents;
    var contentsToJSON;
    var viewports = [
      {
        'name': 'Apple-iPhone-4s-portrait',
        'viewport': {width: 320, height: 480}
      },
      {
        'name': 'Apple-iPhone-4s-landscape',
        'viewport': {width: 480, height: 320}
      },
      {
        'name': 'Apple-iPhone-5-portrait',
        'viewport': {width: 320, height: 568}
      },
      {
        'name': 'Apple-iPhone-5-landscape',
        'viewport': {width: 568, height: 320}
      },
      {
        'name': 'Apple-iPhone-6-portrait',
        'viewport': {width: 540, height: 960}
      },
      {
        'name': 'Apple-iPhone-6-landscape',
        'viewport': {width: 960, height: 540}
      },
      {
        'name': 'Apple-iPad-mini-4-portrait',
        'viewport': {width: 768, height: 1024}
      },
      {
        'name': 'Apple-iPad-mini-4-landscape',
        'viewport': {width: 1024, height: 768}
      },
      {
        'name': 'Desktop-720p-HD',
        'viewport': {width: 1280, height: 720}
      },
      {
        'name': 'Desktop-1080p-HD',
        'viewport': {width: 1920, height: 1080}
      }
    ];

    if (casper.cli.has(0)) {
      inputFile = casper.cli.get(0).toLowerCase();
    }else{
      casper.echo(&quot;No file passed, aborting...&quot;).exit();
    }

    contents = fs.read(inputFile);
    contentsToJSON = JSON.parse(contents);

    var listOfLinks = contentsToJSON.links;
    listOfLinks.forEach(function (currentValue, index, arr) {
      urls.push({url: currentValue.url});
    });

    casper.start().each(urls, function(self, link) {
      self.thenOpen(link.url, function() {
        var folderPath = 'screenshots/' + link.url.split('//')[1].split('/')[0] + '/';
        console.log(&quot;Taking screenshot for the url &quot; + link.url + &quot;...&quot;)
        viewports.forEach(function (currentValue) {
          console.log('Screenshot for ' + currentValue.name + ' (' + currentValue.viewport.width + 'x' + currentValue.viewport.height + ')', 'info');
          self.viewport(currentValue.viewport.width, currentValue.viewport.height);
          self.capture(folderPath + currentValue.name + '-' + currentValue.viewport.width + 'x' + currentValue.viewport.height + '.png', {
            top: 0,
            left: 0,
            width: currentValue.viewport.width,
            height: currentValue.viewport.height
          });
        });
      });
    });

    casper.run();
  &lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;Hopefully this guide has given you the confidence to use CasperJS to open urls and take a screenshot. I hope that this tutorial has helped you and thank you for reading!&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;p&gt;I’ll try to keep this list current and up to date. If you know of a great resource you’d like to share or notice a broken link, please &lt;a href=&quot;https://github.com/poanchen&quot;&gt;get in touch&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;getting-started&quot;&gt;Getting started&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.casperjs.org/en/latest/&quot;&gt;CasperJS documentation&lt;/a&gt; by &lt;a href=&quot;http://casperjs.org/&quot;&gt;CasperJS&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/nhoizey/4060568&quot;&gt;Take screenshots at different viewport sizes using CasperJS&lt;/a&gt; by &lt;a href=&quot;https://github.com/nhoizey&quot;&gt;nhoizey&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.gsmarena.com/&quot;&gt;Check out various screen sizes for different smart phones&lt;/a&gt; by GSMArena.com.&lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>
  
    <entry>
      <title>Is it possible to host two website with different domain name on one server? If yes, how would you do that?</title>
      <link href="https://poanchen.github.io/blog/2016/10/29/is-it-possible-to-host-two-website-with-different-domain-on-one-server"/>
      <updated>2016-10-29T00:00:00-07:00</updated>
      <id>https://poanchen.github.io//blog/2016/10/29/is-it-possible-to-host-two-website-with-different-domain-on-one-server</id>
      <content type="html">&lt;p&gt;If you have ever play around with server administration, you probably already knew the answer for this. The answer for this question is a BIG yes. It is totally possible to host two website on one server. And, you can easily achieve it by using Apache HTTP Server. However, there are various reason why you would do that. There are two reasons that I can come up with. One is, it is more cost-effective as having another server running will cost a bit more. Two is, both website is not consider as high traffic website. Otherwise, it is probably a good idea to separate them. Anyways, our focus in this article would be how you would do that in practice. In this post, we will be using Apache HTTP Server. Apache HTTP Server is consider to be the most used web server in the world according to &lt;a href=&quot;https://trends.builtwith.com/web-server&quot;&gt;Web Server Usage Statistics&lt;/a&gt;. In our example, say we have two website with two different domain name. One is example.com, another one is example.net. Two completely different domain name, and we are going to host them on one server with the help of Apache. Also, to make it simpler. Both website will be using HTTP protocol instead of HTTPS. So, we do not need to get their own SSL certificate. Also, to do this. All we need to do is modify some Apache config file then we will be able to host two different website on one server. Now, a sample of how the example.com conf file might look something like this.&lt;/p&gt;

&lt;h2 id=&quot;apache-config-file-for-examplecom-nbspnbspa-hrefhttpsgithubcompoanchencode-for-blogblobmaster20161029is-it-possible-to-host-two-website-with-different-domain-on-one-serverwww-example-comconf-targetblanksource-codea&quot;&gt;Apache config file for example.com   &lt;a href=&quot;https://github.com/poanchen/code-for-blog/blob/master/2016/10/29/is-it-possible-to-host-two-website-with-different-domain-on-one-server/www-example-com.conf&quot; target=&quot;_blank&quot;&gt;source code&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;apache&quot;&gt;
    &amp;lt;VirtualHost *:80&amp;gt;
      ServerName www.example.com
      ServerAdmin webmaster@localhost
      DocumentRoot /var/www/example.com

      ErrorLog /var/www/example.com/log/error.log
      CustomLog /var/www/example.com/log/access.log combined
    &amp;lt;/VirtualHost&amp;gt;
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The file that you should be modifying is this file, /etc/apache2/sites-enabled/000-default.conf. This is the default config file for apache. The above code is basically telling apache that when a client request a webpage for www.example.com and the port was 80 or HTTP. Then, please go to the root directory, which is /var/www/example.com to find the webpage. Also, make sure to log the access activities to the file namely /var/www/example.com/log/access.log in the server, if there are any errors, then log them into this, /var/www/example.com/log/error.log.&lt;/p&gt;

&lt;h2 id=&quot;apache-config-file-for-examplenet-nbspnbspa-hrefhttpsgithubcompoanchencode-for-blogblobmaster20161029is-it-possible-to-host-two-website-with-different-domain-on-one-serverwww-example-netconf-targetblanksource-codea&quot;&gt;Apache config file for example.net   &lt;a href=&quot;https://github.com/poanchen/code-for-blog/blob/master/2016/10/29/is-it-possible-to-host-two-website-with-different-domain-on-one-server/www-example-net.conf&quot; target=&quot;_blank&quot;&gt;source code&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;apache&quot;&gt;
    &amp;lt;VirtualHost *:80&amp;gt;
      ServerName www.example.net
      ServerAdmin webmaster@localhost
      DocumentRoot /var/www/example.net

      ErrorLog /var/www/example.net/log/error.log
      CustomLog /var/www/example.net/log/access.log combined
    &amp;lt;/VirtualHost&amp;gt;
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Just simply place this right below the code above (www.example.com). As you can see, this is fairly simple to do. However, once we have done all this. We need to do one more steps for this to take effect. We need to restart the apache server. Just remember, whenever you modify something in the apache config file. ALWAYS remember to restart the apache server. Otherwise, it would simply does not work. You may do it by the following command.&lt;/p&gt;

&lt;h2 id=&quot;apache-command-to-restart-the-server&quot;&gt;Apache command to restart the server&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;apache&quot;&gt;
    sudo service apache2 restart
  &lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;As this is a fairly short tutorial. Hopefully you have learned something and now you should begin to play around with Apache configuration. The more you play, the more you would understand how it works. Okay! I hope that this tutorial has helped you and Thanks for reading!&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;p&gt;I’ll try to keep this list current and up to date. If you know of a great resource you’d like to share or notice a broken link, please &lt;a href=&quot;https://github.com/poanchen&quot;&gt;get in touch&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;getting-started&quot;&gt;Getting started&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://httpd.apache.org/docs/&quot;&gt;Apache Documentation&lt;/a&gt; by &lt;a href=&quot;https://httpd.apache.org/&quot;&gt;Apache&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>
  
    <entry>
      <title>How to pass PHP data to your script in WordPress?</title>
      <link href="https://poanchen.github.io/blog/2016/10/28/how-to-pass-php-data-to-your-script-in-wordpress"/>
      <updated>2016-10-28T00:00:00-07:00</updated>
      <id>https://poanchen.github.io//blog/2016/10/28/how-to-pass-php-data-to-your-script-in-wordpress</id>
      <content type="html">&lt;p&gt;Today, I am going to show you guys how to pass PHP data like an array to your JavaScript file in WordPress. However, you might be thinking why would I need to pass PHP data to the script. For example, have to ever encounter where you need to use some object or data from PHP in a JavaScript file, but you do not quite want to build a REST API for it as the data isn’t used a lot. Or, have to ever need to embedded php code in your JavaScript in WordPress? If the answer is positive, then this article is for you. This article will teach you on how to properly pass PHP data (an array) to your JavaScript file. However, in order to make this interesting, we are going to have a PHP file that contains some ielts conversation audios from &lt;a href=&quot;https://www.aehelp.com/&quot;&gt;AEHelp&lt;/a&gt;. Then, we are going to have another PHP file where learner can see and listen to all the audios. We also gonna have a JavaScript file that will get the audios from the PHP file and generate html for each audio on the fly. Now, we can begin.&lt;/p&gt;

&lt;h2 id=&quot;php-code-that-contains-all-the-audios-nbspnbspa-hrefhttpsgithubcompoanchencode-for-blogblobmaster20161028how-to-pass-php-data-to-your-script-in-wordpressaudioplaylistphp-targetblanksource-codea&quot;&gt;PHP code that contains all the audios   &lt;a href=&quot;https://github.com/poanchen/code-for-blog/blob/master/2016/10/28/how-to-pass-php-data-to-your-script-in-wordpress/audioPlaylist.php&quot; target=&quot;_blank&quot;&gt;source code&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;php&quot;&gt;
    // Audios are from https://www.aehelp.com
    // if you are interested in learning ielts, please go to their site!
    // they have amazing online course for ielts that will
    // help you improve your score!
    $basePath = 'https://d5s5h26eyrr5q.cloudfront.net/';

    $urlsForAllTheAudios = array(
      array(
        'artist' =&amp;gt; 'AEHelp',
        'title'  =&amp;gt; 'CD1-T-1: Listening Section 1 (Demo)',
        'mp3'    =&amp;gt; $basePath . 'ielts-sample-audio/CD1-Track-01.mp3'
      ),
      array(
        'artist' =&amp;gt; 'AEHelp',
        'title'  =&amp;gt; 'CD1-T-1: Listening Section 3 (Demo)',
        'mp3'    =&amp;gt; $basePath . 'ielts-sample-audio/CD1-Track-03.mp3'
      ),
      array(
        'artist' =&amp;gt; 'AEHelp',
        'title'  =&amp;gt; 'CD1-T-5: Reading Passage 1 (Demo)',
        'mp3'    =&amp;gt; $basePath . 'ielts-sample-audio/CD1-Track-05.mp3'
      ),
      array(
        'artist' =&amp;gt; 'AEHelp',
        'title'  =&amp;gt; 'CD1-T-7: Reading Passage 3 (Demo)',
        'mp3'    =&amp;gt; $basePath . 'ielts-sample-audio/CD1-Track-07.mp3'
      ),
      array(
        'artist' =&amp;gt; 'AEHelp',
        'title'  =&amp;gt; 'CD1-T-8: Speaking Part 1 (Demo)',
        'mp3'    =&amp;gt; $basePath . 'ielts-sample-audio/CD1-Track-08.mp3'
      )
    );
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now that we have all the audios information in the @variable named urlsForAllTheAudios. Then, we need to pass the array to JavaScript file in WordPress. Before we do that, we are going to create a PHP file. This file would be accessible to user as you should treat this file as the place where to show the users all the audios. First, we need to include the PHP file that we just created above. So that the @variable urlsForAllTheAudios is accessible in this PHP file.&lt;/p&gt;

&lt;h2 id=&quot;php-code-to-start-with&quot;&gt;PHP code to start with&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;php&quot;&gt;
    // Include this php file, so that we have all the information for the audio that we will be playing later
    require_once(&quot;audioPlaylist.php&quot;);
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now that we have the @variable, we need to figure out how to pass that data to the JavaScript file. To do that, we are going to use &lt;a href=&quot;https://codex.wordpress.org/Function_Reference/wp_localize_script&quot;&gt;wp_localize_script&lt;/a&gt;. Through the use of this, it can be used to make any PHP data available to your script that you can normally only get from the server side of WordPress.&lt;/p&gt;

&lt;h2 id=&quot;php-code-to-use-wplocalizescript&quot;&gt;PHP code to use wp_localize_script&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;php&quot;&gt;
    // Enqueue this js file, so that WordPress knows that we will be using this js file in this page
    wp_enqueue_script('audio-demo-player', get_template_directory_uri() . '/createPlaylist.js');

    // now we need to set the array name to be audio_array, so that later in the js file we can call them with that name
    // we also pass in the array that we have in the require_once
    wp_localize_script('audio-demo-player', 'audio_array', $urlsForAllTheAudios);
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is basically telling the wp_localize_script that we are going to pass this @variable namely urlsForAllTheAudios as audio_array to the JavaScript file named createPlaylist.js. Now, since this is a WordPress site, we need to call the wp_head, so that the js file will be included in this page.&lt;/p&gt;

&lt;h2 id=&quot;php-code-to-call-wphead&quot;&gt;PHP code to call wp_head&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;php&quot;&gt;
    // this trigger the &amp;lt;head&amp;gt;&amp;lt;/head&amp;gt; section, which will enqueue the js file. Without this, the js file will not be
    // included in this specific page
    wp_head();
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now that we have enqueue the js file in the WordPress head. Now, we simply need to add a Div element in the PHP file, so that the JavaScript know where to put all the audios. For more information about wp_head, please go to &lt;a href=&quot;https://codex.wordpress.org/Plugin_API/Action_Reference/wp_head&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;html-code-for-placeholder-of-audios&quot;&gt;HTML code for placeholder of audios&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;html&quot;&gt;
    &amp;lt;div id=&quot;audio&quot;&amp;gt;&amp;lt;/div&amp;gt;
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;With this, the JavaScript can now add audio to that Div. Now it is time to create the js file that generate html for each audio on the fly. Then, we are done!&lt;/p&gt;

&lt;h2 id=&quot;javascript-code-to-generate-html-for-each-audio-nbspnbspa-hrefhttpsgithubcompoanchencode-for-blogblobmaster20161028how-to-pass-php-data-to-your-script-in-wordpresscreateplaylistjs-targetblanksource-codea&quot;&gt;JavaScript code to generate html for each audio   &lt;a href=&quot;https://github.com/poanchen/code-for-blog/blob/master/2016/10/28/how-to-pass-php-data-to-your-script-in-wordpress/createPlaylist.js&quot; target=&quot;_blank&quot;&gt;source code&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;javascript&quot;&gt;
    document.addEventListener(&quot;DOMContentLoaded&quot;, function(event) { 
      for (var i = 0; i &amp;lt; audio_array.length; i++) {
        addAudioToHTML(audio_array[i].artist, audio_array[i].title, audio_array[i].mp3, i);
      }

      function addAudioToHTML (artist, title, source, position) {
        var parentDiv = document.createElement(&quot;div&quot;);
        var firstP = document.createElement(&quot;p&quot;);
        var artistForP1 = document.createTextNode(&quot;Artist: &quot; + artist);

        firstP.appendChild(artistForP1);
        parentDiv.appendChild(firstP);

        var secondP = document.createElement(&quot;p&quot;);
        var artistForP2 = document.createTextNode(&quot;Title: &quot; + title);

        secondP.appendChild(artistForP2);
        parentDiv.appendChild(secondP);

        var audio = new Audio(source);
        audio.controls = true;
        // add warning message for web browser that does not support audio tag
        audio.innerHTML = &quot;Your browser does not support the audio element.&quot;;

        parentDiv.appendChild(audio);

        var audioDiv = document.getElementById('audio');
        document.querySelector('#audio').insertBefore(parentDiv, audioDiv.childNodes[position]);
      }
    });
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;We need to wrap everythings in the DOMContentLoaded because without it, the javascript code will execute before the DOM which will not work (Including your JavaScript in your head section of HTML might increase the page load, hence, do not do that in production). In the code, we have a for loop that grabs each audio information one by one and call the function addAudioToHTML to append the audio to the Div that we created earlier. Notice that to play the audio, we are using the audio tag which is only available in HTML5. Please check &lt;a href=&quot;http://www.w3schools.com/html/html5_audio.asp&quot;&gt;here&lt;/a&gt; to see if your browser works with HTML5 audio tag. Here is a screenshot of how it would look like. If you would like to see it in live, please check out this &lt;a href=&quot;https://www.jenrenalcare.com/upload/poanchen.github.io/sample-code/2016/10/28/how-to-pass-php-data-to-your-script-in-wordpress/showPlaylistToUser.php&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016/10/28/how-to-pass-php-data-to-your-script-in-wordpress/audioPlaylist.PNG&quot; alt=&quot;example on the audio playlist look like in HTML&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;complete-code-for-php-that-show-audio-playlist-to-user-nbspnbspa-hrefhttpsgithubcompoanchencode-for-blogblobmaster20161028how-to-pass-php-data-to-your-script-in-wordpressshowplaylisttouserphp-targetblanksource-codea&quot;&gt;Complete code for PHP that show audio playlist to user   &lt;a href=&quot;https://github.com/poanchen/code-for-blog/blob/master/2016/10/28/how-to-pass-php-data-to-your-script-in-wordpress/showPlaylistToUser.php&quot; target=&quot;_blank&quot;&gt;source code&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;php&quot;&gt;
    &amp;lt;?php

    // Include this php file, so that we have all the information for the audio that we will be playing later
    require_once(&quot;audioPlaylist.php&quot;);

    // Enqueue this js file, so that WordPress knows that we will be using this js file in this page
    wp_enqueue_script('audio-demo-player', get_template_directory_uri() . '/createPlaylist.js');

    // now we need to set the array name to be audio_array, so that later in the js file we can call them with that name
    // we also pass in the array that we have in the require_once
    wp_localize_script('audio-demo-player', 'audio_array', $urlsForAllTheAudios);

    // this trigger the &amp;lt;head&amp;gt;&amp;lt;/head&amp;gt; section, which will enqueue the js file. Without this, the js file will not be
    // included in this specific page
    wp_head();

    ?&amp;gt;
    
    &amp;lt;div id=&quot;audio&quot;&amp;gt;&amp;lt;/div&amp;gt;
  &lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;Hopefully this guide has given you the confidence to pass PHP data to JavaScript file in WordPress. Hopefully, you can . I hope that this tutorial has helped you and you can use this function in your own code and enjoy its benefits! Thank you for reading!&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;p&gt;I’ll try to keep this list current and up to date. If you know of a great resource you’d like to share or notice a broken link, please &lt;a href=&quot;https://github.com/poanchen&quot;&gt;get in touch&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;getting-started&quot;&gt;Getting started&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jenrenalcare.com/upload/poanchen.github.io/sample-code/2016/10/28/how-to-pass-php-data-to-your-script-in-wordpress/showPlaylistToUser.php&quot;&gt;Live site of How to pass PHP data to your script in WordPress?&lt;/a&gt; by &lt;a href=&quot;https://github.com/poanchen&quot;&gt;poanchen&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://code.tutsplus.com/tutorials/how-to-pass-php-data-and-strings-to-javascript-in-wordpress--wp-34699&quot;&gt;How to Pass PHP Data and Strings to JavaScript in WordPress&lt;/a&gt; by &lt;a href=&quot;https://tutsplus.com/authors/benjamin-intal&quot;&gt;Benjamin Intal&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>
  
    <entry>
      <title>How to login to a WordPress site using CasperJS?</title>
      <link href="https://poanchen.github.io/blog/2016/10/27/how-to-login-to-wordpress-site-using-casperjs"/>
      <updated>2016-10-27T00:00:00-07:00</updated>
      <id>https://poanchen.github.io//blog/2016/10/27/how-to-login-to-wordpress-site-using-casperjs</id>
      <content type="html">&lt;p&gt;Today, I am going to show you guys how to login to a site using CasperJS. CasperJS, is a navigation scripting and testing utility for &lt;a href=&quot;http://phantomjs.org/&quot;&gt;PhantomJS&lt;/a&gt;, written in JavaScript. It allows us to test websites a lot like &lt;a href=&quot;https://github.com/sebastianbergmann/phpunit/&quot;&gt;PHPUnit&lt;/a&gt;. Imagine that using CasperJS to automate the testing on your site. How it can help you to automate the repetitive tasks. How it can save your time and help you focus on implmenting your business logics. In this tutorial, we are going to impersonate a typical user who wants to login to a WordPress site, with correct username and password, they will be granted to signin. To prove that we are logged in to the site, we will be taking a screenshot when we passed the signin part. If you haven’t already, install &lt;a href=&quot;http://casperjs.org/&quot;&gt;CasperJS&lt;/a&gt; or &lt;a href=&quot;http://phantomjs.org/&quot;&gt;PhantomJS&lt;/a&gt; before we continue on. Now, let’s dive right in.&lt;/p&gt;

&lt;h2 id=&quot;casperjs-code-to-start-with&quot;&gt;CasperJS code to start with&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;javascript&quot;&gt;
    var page = require('webpage').create();
    var casper = require('casper').create();

    var urlBeforeLoggedIn = &quot;https://www.jenrenalcare.com/wp-login.php&quot;;
    var urlAfterLoggedIn = &quot;https://www.jenrenalcare.com/wp-admin/&quot;;
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The above code is a simple set up to get the CasperJS working. Those two variables namely urlBeforeLoggedIn and urlAfterLoggedIn. We will be using those url to sign in and for after sign in. Then, we need to get the CasperJS to open a site. It can be as simple as something like this.&lt;/p&gt;

&lt;h2 id=&quot;casperjs-code-to-open-a-site&quot;&gt;CasperJS code to open a site&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;javascript&quot;&gt;
    casper.start(urlBeforeLoggedIn);
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This simply means that CasperJS start by going to this specific site. Then, now we need to login to the site. With CasperJS, we can simply achieve it by doing,&lt;/p&gt;

&lt;h2 id=&quot;casperjs-code-to-submit-a-post-form&quot;&gt;CasperJS code to submit a POST form&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;javascript&quot;&gt;
    casper.waitForSelector('form[method=&quot;post&quot;]', function() {
      casper.fillSelectors('form[method=&quot;post&quot;]', {
        'input[name=&quot;log&quot;]': 'put_your_username_or_email_address_here',
        'input[name=&quot;pwd&quot;]': 'put_your_password_here'
      }, true);
    });
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;By the way, I used the web browser page inspector to get the name of the username field and password field which is log and pwd. At the end, I also set true, so that the form will be submitted automatically. Be sured to put your real username and password there. Then, all we need to do is wait for the site to transfer to the logged in area.&lt;/p&gt;

&lt;h2 id=&quot;casperjs-code-to-wait-for-the-url-to-redirect-to-logged-in-area&quot;&gt;CasperJS code to wait for the url to redirect to logged in area&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;javascript&quot;&gt;
    casper.waitForUrl(urlAfterLoggedIn, function() {
      this.echo(&quot;Now, with correct username and password, you should be signed in to the site when you see this.&quot;);
    });
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;When you run this CasperJS script, and see the message printed. That means that you have successfully signed in with CasperJS. To prove that we are signed in, I will be taking screenshot using the built-in function in CasperJS.&lt;/p&gt;

&lt;h2 id=&quot;casperjs-code-to-screenshot-where-we-are-in-casperjs-script&quot;&gt;CasperJS code to screenshot where we are in CasperJS script&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;javascript&quot;&gt;
    casper.waitForUrl(urlAfterLoggedIn, function() {
      this.viewport(3000, 1080);
      this.capture('./screenshot.png', {top: 0,left: 0,width: 3000, height: 1080});
    });
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;When this script is completed, you should see an image saved in where you put your CasperJS script.&lt;/p&gt;

&lt;h2 id=&quot;complete-code-for-casperjs-script-that-signin-to-a-wordpress-site-then-take-a-screenshot-when-it-is-in-nbspnbspa-hrefhttpsgithubcompoanchencode-for-blogblobmaster20161027how-to-login-to-wordpress-site-using-casperjslogintowordpresssitejs-targetblanksource-codea&quot;&gt;Complete code for CasperJS script that signin to a WordPress site, then take a screenshot when it is in   &lt;a href=&quot;https://github.com/poanchen/code-for-blog/blob/master/2016/10/27/how-to-login-to-wordpress-site-using-casperjs/loginToWordpressSite.js&quot; target=&quot;_blank&quot;&gt;source code&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;javascript&quot;&gt;
    var page = require('webpage').create();
    var casper = require('casper').create();

    var urlBeforeLoggedIn = &quot;https://www.jenrenalcare.com/wp-login.php&quot;;
    var urlAfterLoggedIn = &quot;https://www.jenrenalcare.com/wp-admin/&quot;;

    casper.start(urlBeforeLoggedIn);

    casper.waitForSelector('form[method=&quot;post&quot;]', function() {
      casper.fillSelectors('form[method=&quot;post&quot;]', {
        'input[name=&quot;log&quot;]': 'put_your_username_or_email_address_here',
        'input[name=&quot;pwd&quot;]': 'put_your_password_here'
      }, true);
    });

    casper.waitForUrl(urlAfterLoggedIn, function() {
      this.viewport(3000, 1080);
      this.capture('./screenshot.png', {top: 0,left: 0,width: 3000, height: 1080});
    });

    casper.run();
  &lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;Hopefully this guide has given you the confidence to use CasperJS to simulate user activity on a web page. For example, login. I hope that this tutorial has helped you and thank you for reading!&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;p&gt;I’ll try to keep this list current and up to date. If you know of a great resource you’d like to share or notice a broken link, please &lt;a href=&quot;https://github.com/poanchen&quot;&gt;get in touch&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;getting-started&quot;&gt;Getting started&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.casperjs.org/en/latest/&quot;&gt;CasperJS documentation&lt;/a&gt; by &lt;a href=&quot;http://casperjs.org/&quot;&gt;CasperJS&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/poanchen/image-downloader&quot;&gt;Image downloader using CasperJS&lt;/a&gt; by &lt;a href=&quot;https://github.com/poanchen&quot;&gt;poanchen&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>
  
    <entry>
      <title>How to programmatically register an account for a user in WordPress?</title>
      <link href="https://poanchen.github.io/blog/2016/10/22/how-to-programmatically-register-an-account-in-wordpress"/>
      <updated>2016-10-22T00:00:00-07:00</updated>
      <id>https://poanchen.github.io//blog/2016/10/22/how-to-programmatically-register-an-account-in-wordpress</id>
      <content type="html">&lt;p&gt;Today, I am going to show you guys how to programmatically create an account for a user in WordPress. To help you understand clearly, we are going to write a REST API in PHP in the back-end. In the front-end, we will be using jQuery AJAX to query it. In case of error like username already exist, we will be printing out the error to the user in real-time. Lets get started!&lt;/p&gt;

&lt;h2 id=&quot;php-code-to-start-with-directly-grabbed-from-herehttpspoanchengithubioblog20161016how-to-create-simple-rest-api-in-php-and-call-them-in-js-nbspnbspa-hrefhttpsgithubcompoanchencode-for-blogblobmaster20161016how-to-create-simple-rest-api-in-php-and-call-them-in-jscheckifusernameexistphp-targetblanksource-codea&quot;&gt;PHP code to start with (directly grabbed from &lt;a href=&quot;https://poanchen.github.io/blog/2016/10/16/how-to-create-simple-rest-api-in-php-and-call-them-in-js&quot;&gt;here&lt;/a&gt;)   &lt;a href=&quot;https://github.com/poanchen/code-for-blog/blob/master/2016/10/16/how-to-create-simple-rest-api-in-php-and-call-them-in-js/checkIfUsernameExist.php&quot; target=&quot;_blank&quot;&gt;source code&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;php&quot;&gt;
    // Include the wp-load.php so that we can use WordPress API
    $parse_uri = explode( 'wp-content', $_SERVER['SCRIPT_FILENAME'] );
    require_once( $parse_uri[0] . 'wp-load.php' );

    $data = array();
    $username = sanitize_text_field($_POST['username']);

    if (username_exists($username)) {
      $data[&quot;username&quot;] = $username;
      $data[&quot;result&quot;] = true;
    }else {
      $data[&quot;username&quot;] = $username;
      $data[&quot;result&quot;] = false;
    }

    // return all our data to an AJAX call
    echo json_encode($data, JSON_PRETTY_PRINT);
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;As you can see, it is a fairly simple REST API in PHP that return a JSON to allow user to know if the username exist or not&lt;br /&gt;
The output should look something like this.&lt;/p&gt;
&lt;pre&gt;
  &lt;code class=&quot;json&quot;&gt;
    { &quot;username&quot;: &quot;&quot;, &quot;result&quot;: false }
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The reason why the username is empty. It is because we didn’t pass in any username to the PHP file. We just simply call it.&lt;/p&gt;

&lt;h2 id=&quot;html-code-to-start-with-directly-grabbed-from-herehttpspoanchengithubioblog20161016how-to-create-simple-rest-api-in-php-and-call-them-in-js-nbspnbspa-hrefhttpsgithubcompoanchencode-for-blogblobmaster20161016how-to-create-simple-rest-api-in-php-and-call-them-in-jscheckifusernameexistjqueryhtml-targetblanksource-codea&quot;&gt;HTML Code to start with (directly grabbed from &lt;a href=&quot;https://poanchen.github.io/blog/2016/10/16/how-to-create-simple-rest-api-in-php-and-call-them-in-js&quot;&gt;here&lt;/a&gt;)   &lt;a href=&quot;https://github.com/poanchen/code-for-blog/blob/master/2016/10/16/how-to-create-simple-rest-api-in-php-and-call-them-in-js/checkIfUsernameExistJquery.html&quot; target=&quot;_blank&quot;&gt;source code&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;html&quot;&gt;
    &amp;lt;input type=&quot;text&quot; id=&quot;username&quot; name=&quot;username&quot; placeholder=&quot;username&quot;&amp;gt;
    &amp;lt;p id=&quot;usernameResult&quot;&amp;gt;&amp;lt;/p&amp;gt;

    &amp;lt;script src=&quot;//ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
      $(document).ready(function () {
        var usernameSelected = $('#username');
        var usernameWarning = $('#usernameResult');

        usernameSelected.keyup(function() {
          var url = &quot;https://www.jenrenalcare.com/upload/poanchen.github.io/sample-code/2016/10/16/how-to-create-simple-rest-api-in-php-and-call-them-in-js/checkIfUsernameExist.php&quot;;
          var formData = {
            'username' : usernameSelected.val()
          };

          $.ajax({
            type : 'POST',
            url : url,
            data : formData,
            dataType : 'JSON',
            encode : true,
            success: function (response, status, xhr) {
              if (response.result) {
                usernameWarning.html(&quot;The username you typed has been used!&quot;);
              }else{
                usernameWarning.html(&quot;You may freely use this username!&quot;);
              }
            },
            error: function (xhr, status, error) {
              usernameWarning.html(&quot;Something went wrong!&quot;);
            }
          });
        });
     });
    &amp;lt;/script&amp;gt;
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Okay, now when we have these two files to start with. We can now try to tweak it so that it allows us to create an account for a user in WordPress. First, we need to add the input in the front-end so that user have place to input their email address and their password for their account. We simply add the following lines below the HTML input for username.&lt;/p&gt;

&lt;h2 id=&quot;html-code-for-adding-html-input-for-email-and-password&quot;&gt;HTML Code for adding HTML input for email and password&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;html&quot;&gt;
    &amp;lt;input type=&quot;text&quot; id=&quot;email&quot; name=&quot;email&quot; placeholder=&quot;email&quot;&amp;gt;
    &amp;lt;p id=&quot;emailResult&quot;&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;input type=&quot;password&quot; id=&quot;password&quot; name=&quot;password&quot; placeholder=&quot;password&quot;&amp;gt;
    &amp;lt;p id=&quot;passwordResult&quot;&amp;gt;&amp;lt;/p&amp;gt;
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now, when you open up your page in the web browser, you should see something like &lt;a href=&quot;https://www.jenrenalcare.com/upload/poanchen.github.io/sample-code/2016/10/22/how-to-programmatically-register-an-account-in-wordpress/tryRegisterAnAccountJquery.html&quot;&gt;this&lt;/a&gt;.&lt;br /&gt;
At this point, we may try to add some error code so that we know what is actually going on.&lt;/p&gt;

&lt;h2 id=&quot;php-code-with-some-pre-defined-error-code&quot;&gt;PHP Code with some pre-defined error code&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;php&quot;&gt;
    // Include the wp-load.php so that we can use WordPress API
    $parse_uri = explode( 'wp-content', $_SERVER['SCRIPT_FILENAME'] );
    require_once( $parse_uri[0] . 'wp-load.php' );

    define(&quot;USERNAME_ALREADY_EXIST&quot;, 1);
    define(&quot;EMAIL_ADDRESS_ALREADY_EXIST&quot;, 2);
    define(&quot;NOT_A_VALID_EMAIL_ADDRESS&quot;, 3);
    define(&quot;PASSWORD_LENGTH_IS_TOO_SHORT&quot;, 4);
    define(&quot;SUCCESS&quot;, true);
    define(&quot;FAIL&quot;, false);

    $data = array();
    $username = sanitize_text_field($_POST['username']);
    $email = sanitize_text_field($_POST['email']);
    $password = sanitize_text_field($_POST['password']);

    $data[&quot;username&quot;] = $username;
    $data[&quot;email&quot;] = $email;
    $data[&quot;password&quot;] = $password;

    if (username_exists($username)) {
      $data[&quot;result&quot;] = USERNAME_ALREADY_EXIST;
    }else {
      $data[&quot;result&quot;] = FAIL;
    }

    // return all our data to an AJAX call
    echo json_encode($data, JSON_PRETTY_PRINT);
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;We have added some error code, so that in the front-end, when we receive the result of 2, then we know that the email address is already exist. Let’s try to add some validation to check if the username exist or not. If it is true, then return the error code that we pre-defined.&lt;/p&gt;

&lt;h2 id=&quot;php-code-to-check-if-username-exist-or-not&quot;&gt;PHP Code to check if username exist or not.&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;php&quot;&gt;
    // Include the wp-load.php so that we can use WordPress API
    $parse_uri = explode( 'wp-content', $_SERVER['SCRIPT_FILENAME'] );
    require_once( $parse_uri[0] . 'wp-load.php' );

    define(&quot;USERNAME_ALREADY_EXIST&quot;, 1);
    define(&quot;EMAIL_ADDRESS_ALREADY_EXIST&quot;, 2);
    define(&quot;NOT_A_VALID_EMAIL_ADDRESS&quot;, 3);
    define(&quot;PASSWORD_LENGTH_IS_TOO_SHORT&quot;, 4);
    define(&quot;SUCCESS&quot;, true);
    define(&quot;FAIL&quot;, false);

    $data = array();
    $errors = array();
    $username = sanitize_text_field($_POST['username']);
    $email = sanitize_text_field($_POST['email']);
    $password = sanitize_text_field($_POST['password']);

    $data[&quot;username&quot;] = $username;
    $data[&quot;email&quot;] = $email;
    $data[&quot;password&quot;] = $password;

    if (!empty($username)) {
      if (username_exists($username)) {
        $errors[] = USERNAME_ALREADY_EXIST;
      }
    }

    if (count($errors)) {
      $data[&quot;errors&quot;] = $errors;
      $data[&quot;result&quot;] = FAIL;
    }else{
      $data[&quot;result&quot;] = SUCCESS;
    }

    // return all our data to an AJAX call
    echo json_encode($data, JSON_PRETTY_PRINT);
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now, when we query the PHP code, we should see something like this.&lt;/p&gt;
&lt;pre&gt;
  &lt;code class=&quot;json&quot;&gt;
    { &quot;username&quot;: &quot;test&quot;, &quot;email&quot;: &quot;&quot;, &quot;password&quot;: &quot;&quot;, &quot;errors&quot;: [ 1 ], &quot;result&quot;: false }
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Whenever, we see the errors array, we know that something went wrong. Like, in this example, 1 means that username existed. Also, by checking the result, we know that it was a false. Which tells us that it was a failure to create an account for user.&lt;br /&gt;
Now, let’s try to combine this with the front-end code, so that we can actually see how it works in the user’s point of view.&lt;/p&gt;

&lt;h2 id=&quot;html-code-to-check-if-username-exist-or-not&quot;&gt;HTML Code to check if username exist or not.&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;html&quot;&gt;
    &amp;lt;input type=&quot;text&quot; id=&quot;username&quot; name=&quot;username&quot; placeholder=&quot;username&quot;&amp;gt;
    &amp;lt;p id=&quot;usernameResult&quot;&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;input type=&quot;text&quot; id=&quot;email&quot; name=&quot;email&quot; placeholder=&quot;email&quot;&amp;gt;
    &amp;lt;p id=&quot;emailResult&quot;&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;input type=&quot;password&quot; id=&quot;password&quot; name=&quot;password&quot; placeholder=&quot;password&quot;&amp;gt;
    &amp;lt;p id=&quot;passwordResult&quot;&amp;gt;&amp;lt;/p&amp;gt;

    &amp;lt;script src=&quot;//ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
      $(document).ready(function () {
        // username
        var usernameSelected = $('#username');
        var usernameWarning = $('#usernameResult');
        // email
        var emailSelected = $('#email');
        var emailWarning = $('#emailResult');
        // password
        var passwordSelected = $('#password');
        var passwordWarning = $('#passwordResult');

        usernameSelected.keyup(function() {
          createAnAccountForUserInWordPress();
        });

        function createAnAccountForUserInWordPress () {
          var url = &quot;https://www.jenrenalcare.com/upload/poanchen.github.io/sample-code/2016/10/22/how-to-programmatically-register-an-account-in-wordpress/tryRegisterAnAccount.php&quot;;
          var formData = {
            'username' : usernameSelected.val()
          };

          $.ajax({
            type : 'POST',
            url : url,
            data : formData,
            dataType : 'JSON',
            encode : true,
            success: function (response, status, xhr) {
              if (!response.result) {
                outpurErrorMessages(response.errors);
              }else{
                clearErrorMessages();
              }
            },
            error: function (xhr, status, error) {
              usernameWarning.html(&quot;Something went wrong!&quot;);
            }
          });
        }

        function outpurErrorMessages (errorCodes) {
          errorCodes.forEach(function (element, index, array) {
            switch(element) {
              case 1:
                usernameWarning.html(&quot;The username you typed has been used!&quot;);
                break;
              default:
                console.log(&quot;test&quot;);
            }
          });
        }

        function clearErrorMessages () {
          usernameWarning.html(&quot;&quot;);
          emailWarning.html(&quot;&quot;);
          passwordWarning.html(&quot;&quot;);
        }
     });
    &amp;lt;/script&amp;gt;
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now, when you start typing, if the username you input exist then it will tells you that. Otherwise, it will not print anything.&lt;br /&gt;Now, let’s try to check if the user’s email is valid or not!&lt;/p&gt;

&lt;h2 id=&quot;php-code-to-check-if-users-email-is-valid-or-not&quot;&gt;PHP Code to check if user’s email is valid or not.&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;php&quot;&gt;
    // Include the wp-load.php so that we can use WordPress API
    $parse_uri = explode( 'wp-content', $_SERVER['SCRIPT_FILENAME'] );
    require_once( $parse_uri[0] . 'wp-load.php' );

    define(&quot;USERNAME_ALREADY_EXIST&quot;, 1);
    define(&quot;EMAIL_ADDRESS_ALREADY_EXIST&quot;, 2);
    define(&quot;NOT_A_VALID_EMAIL_ADDRESS&quot;, 3);
    define(&quot;PASSWORD_LENGTH_IS_TOO_SHORT&quot;, 4);
    define(&quot;SUCCESS&quot;, true);
    define(&quot;FAIL&quot;, false);

    $data = array();
    $errors = array();
    $username = sanitize_text_field($_POST['username']);
    $email = sanitize_text_field($_POST['email']);
    $password = sanitize_text_field($_POST['password']);

    $data[&quot;username&quot;] = $username;
    $data[&quot;email&quot;] = $email;
    $data[&quot;password&quot;] = $password;

    if (!empty($username)) {
      if (username_exists($username)) {
        $errors[] = USERNAME_ALREADY_EXIST;
      }
    }

    if (!empty($email)) {
      if (!is_email($email)) {
        $errors[] = NOT_A_VALID_EMAIL_ADDRESS;
      }else{
        if (email_exists($email)) {
          $errors[] = EMAIL_ADDRESS_ALREADY_EXIST;
        }
      }
    }

    if (count($errors)) {
      $data[&quot;errors&quot;] = $errors;
      $data[&quot;result&quot;] = FAIL;
    }else{
      $data[&quot;result&quot;] = SUCCESS;
    }

    // return all our data to an AJAX call
    echo json_encode($data, JSON_PRETTY_PRINT);
  &lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;html-code-to-check-if-users-email-is-valid-or-not&quot;&gt;HTML Code to check if user’s email is valid or not.&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;html&quot;&gt;
    &amp;lt;input type=&quot;text&quot; id=&quot;username&quot; name=&quot;username&quot; placeholder=&quot;username&quot;&amp;gt;
    &amp;lt;p id=&quot;usernameResult&quot;&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;input type=&quot;text&quot; id=&quot;email&quot; name=&quot;email&quot; placeholder=&quot;email&quot;&amp;gt;
    &amp;lt;p id=&quot;emailResult&quot;&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;input type=&quot;password&quot; id=&quot;password&quot; name=&quot;password&quot; placeholder=&quot;password&quot;&amp;gt;
    &amp;lt;p id=&quot;passwordResult&quot;&amp;gt;&amp;lt;/p&amp;gt;

    &amp;lt;script src=&quot;//ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
      $(document).ready(function () {
        // username
        var usernameSelected = $('#username');
        var usernameWarning = $('#usernameResult');
        // email
        var emailSelected = $('#email');
        var emailWarning = $('#emailResult');
        // password
        var passwordSelected = $('#password');
        var passwordWarning = $('#passwordResult');

        usernameSelected.keyup(function() {
          createAnAccountForUserInWordPress();
        });

        emailSelected.keyup(function() {
          createAnAccountForUserInWordPress();
        });

        function createAnAccountForUserInWordPress () {
          var url = &quot;https://www.jenrenalcare.com/upload/poanchen.github.io/sample-code/2016/10/22/how-to-programmatically-register-an-account-in-wordpress/tryRegisterAnAccount.php&quot;;
          var formData = {
            'username' : usernameSelected.val(),
            'email' : emailSelected.val()
          };

          $.ajax({
            type : 'POST',
            url : url,
            data : formData,
            dataType : 'JSON',
            encode : true,
            success: function (response, status, xhr) {
              clearErrorMessages();
              if (!response.result) {
                outpurErrorMessages(response.errors);
              }
            },
            error: function (xhr, status, error) {
              usernameWarning.html(&quot;Something went wrong!&quot;);
            }
          });
        }

        function outpurErrorMessages (errorCodes) {
          errorCodes.forEach(function (element, index, array) {
            switch(element) {
              case 1:
                usernameWarning.html(&quot;The username you typed has been used!&quot;);
                break;
              case 2:
                emailWarning.html(&quot;The email address you typed has been used!&quot;);
                break;
              case 3:
                emailWarning.html(&quot;The email address you typed is not valid!&quot;);
                break;
              default:
                console.log(&quot;test&quot;);
            }
          });
        }

        function clearErrorMessages () {
          usernameWarning.html(&quot;&quot;);
          emailWarning.html(&quot;&quot;);
          passwordWarning.html(&quot;&quot;);
        }
     });
    &amp;lt;/script&amp;gt;
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now, with the PHP code and HTML code combined. You may try to email field. Try to type something that isn’t an email. You should see the warning that you inputted invalid email. Try email like ‘a@b.c’. You should see that the email address that you typed has been used. Yaa! Okay. Now, we can do the similar thing with password then we will be close in creating an account for a WordPress user!&lt;/p&gt;

&lt;h2 id=&quot;php-code-to-check-if-users-password-is-at-least-length-of-5&quot;&gt;PHP code to check if user’s password is at least length of 5.&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;php&quot;&gt;
    // Include the wp-load.php so that we can use WordPress API
    $parse_uri = explode( 'wp-content', $_SERVER['SCRIPT_FILENAME'] );
    require_once( $parse_uri[0] . 'wp-load.php' );

    define(&quot;USERNAME_ALREADY_EXIST&quot;, 1);
    define(&quot;EMAIL_ADDRESS_ALREADY_EXIST&quot;, 2);
    define(&quot;NOT_A_VALID_EMAIL_ADDRESS&quot;, 3);
    define(&quot;PASSWORD_LENGTH_IS_TOO_SHORT&quot;, 4);
    define(&quot;SUCCESS&quot;, true);
    define(&quot;FAIL&quot;, false);

    $data = array();
    $errors = array();
    $username = sanitize_text_field($_POST['username']);
    $email = sanitize_text_field($_POST['email']);
    $password = sanitize_text_field($_POST['password']);

    $data[&quot;username&quot;] = $username;
    $data[&quot;email&quot;] = $email;
    $data[&quot;password&quot;] = $password;

    if (!empty($username)) {
      if (username_exists($username)) {
        $errors[] = USERNAME_ALREADY_EXIST;
      }
    }

    if (!empty($email)) {
      if (!is_email($email)) {
        $errors[] = NOT_A_VALID_EMAIL_ADDRESS;
      }else{
        if (email_exists($email)) {
          $errors[] = EMAIL_ADDRESS_ALREADY_EXIST;
        }
      }
    }

    if (!empty($password)) {
      if (strlen($password) &amp;lt; 5) {
        $errors[] = PASSWORD_LENGTH_IS_TOO_SHORT;
      }
    }

    if (count($errors)) {
      $data[&quot;errors&quot;] = $errors;
      $data[&quot;result&quot;] = FAIL;
    }else{
      $data[&quot;result&quot;] = SUCCESS;
    }

    // return all our data to an AJAX call
    echo json_encode($data, JSON_PRETTY_PRINT);
  &lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;html-code-to-check-if-users-password-is-at-least-length-of-5-nbspnbspa-hrefhttpsgithubcompoanchencode-for-blogblobmaster20161022how-to-programmatically-register-an-account-in-wordpresstryregisteranaccountjqueryhtml-targetblanksource-codea&quot;&gt;HTML Code to check if user’s password is at least length of 5.   &lt;a href=&quot;https://github.com/poanchen/code-for-blog/blob/master/2016/10/22/how-to-programmatically-register-an-account-in-wordpress/tryRegisterAnAccountJquery.html&quot; target=&quot;_blank&quot;&gt;source code&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;html&quot;&gt;
    &amp;lt;input type=&quot;text&quot; id=&quot;username&quot; name=&quot;username&quot; placeholder=&quot;username&quot;&amp;gt;
    &amp;lt;p id=&quot;usernameResult&quot;&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;input type=&quot;text&quot; id=&quot;email&quot; name=&quot;email&quot; placeholder=&quot;email&quot;&amp;gt;
    &amp;lt;p id=&quot;emailResult&quot;&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;input type=&quot;password&quot; id=&quot;password&quot; name=&quot;password&quot; placeholder=&quot;password&quot;&amp;gt;
    &amp;lt;p id=&quot;passwordResult&quot;&amp;gt;&amp;lt;/p&amp;gt;

    &amp;lt;script src=&quot;//ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
      $(document).ready(function () {
        // username
        var usernameSelected = $('#username');
        var usernameWarning = $('#usernameResult');
        // email
        var emailSelected = $('#email');
        var emailWarning = $('#emailResult');
        // password
        var passwordSelected = $('#password');
        var passwordWarning = $('#passwordResult');

        usernameSelected.keyup(function() {
          createAnAccountForUserInWordPress();
        });

        emailSelected.keyup(function() {
          createAnAccountForUserInWordPress();
        });

        passwordSelected.keyup(function() {
          createAnAccountForUserInWordPress();
        });

        function createAnAccountForUserInWordPress () {
          var url = &quot;https://www.jenrenalcare.com/upload/poanchen.github.io/sample-code/2016/10/22/how-to-programmatically-register-an-account-in-wordpress/tryRegisterAnAccount.php&quot;;
          var formData = {
            'username' : usernameSelected.val(),
            'email' : emailSelected.val(),
            'password' : passwordSelected.val()
          };

          $.ajax({
            type : 'POST',
            url : url,
            data : formData,
            dataType : 'JSON',
            encode : true,
            success: function (response, status, xhr) {
              clearErrorMessages();
              if (!response.result) {
                outpurErrorMessages(response.errors);
              }
            },
            error: function (xhr, status, error) {
              usernameWarning.html(&quot;Something went wrong!&quot;);
            }
          });
        }

        function outpurErrorMessages (errorCodes) {
          errorCodes.forEach(function (element, index, array) {
            switch(element) {
              case 1:
                usernameWarning.html(&quot;The username you typed has been used!&quot;);
                break;
              case 2:
                emailWarning.html(&quot;The email address you typed has been used!&quot;);
                break;
              case 3:
                emailWarning.html(&quot;The email address you typed is not valid!&quot;);
                break;
              case 4:
                passwordWarning.html(&quot;Please input a password that is at least length of 5!&quot;);
                break;
              default:
                console.log(&quot;test&quot;);
            }
          });
        }

        function clearErrorMessages () {
          usernameWarning.html(&quot;&quot;);
          emailWarning.html(&quot;&quot;);
          passwordWarning.html(&quot;&quot;);
        }
     });
    &amp;lt;/script&amp;gt;
  &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;https://codepen.io/poanchen/pen/gLmYOB?editors=101&quot; target=&quot;_blank&quot;&gt;
  &lt;img src=&quot;https://blog.codepen.io/wp-content/uploads/2012/06/TryItOn-CodePen.svg&quot; width=&quot;150&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Live link are &lt;a href=&quot;https://www.jenrenalcare.com/upload/poanchen.github.io/sample-code/2016/10/22/how-to-programmatically-register-an-account-in-wordpress/tryRegisterAnAccountJquery.html&quot;&gt;here&lt;/a&gt;.&lt;br /&gt;
Now, you may try to input your password, and it will alert you whenever your password length isn’t at least length of 5!&lt;br /&gt;
Okay. Now, we have user’s username, email and password. I think it is time to create an account for them in WordPress.&lt;/p&gt;

&lt;h2 id=&quot;php-code-to-create-an-account-for-user-in-wordpress-nbspnbspa-hrefhttpsgithubcompoanchencode-for-blogblobmaster20161022how-to-programmatically-register-an-account-in-wordpresstryregisteranaccountphp-targetblanksource-codea&quot;&gt;PHP code to create an account for user in WordPress.   &lt;a href=&quot;https://github.com/poanchen/code-for-blog/blob/master/2016/10/22/how-to-programmatically-register-an-account-in-wordpress/tryRegisterAnAccount.php&quot; target=&quot;_blank&quot;&gt;source code&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;php&quot;&gt;
    // Include the wp-load.php so that we can use WordPress API
    $parse_uri = explode( 'wp-content', $_SERVER['SCRIPT_FILENAME'] );
    require_once( $parse_uri[0] . 'wp-load.php' );

    define(&quot;USERNAME_ALREADY_EXIST&quot;, 1);
    define(&quot;EMAIL_ADDRESS_ALREADY_EXIST&quot;, 2);
    define(&quot;NOT_A_VALID_EMAIL_ADDRESS&quot;, 3);
    define(&quot;PASSWORD_LENGTH_IS_TOO_SHORT&quot;, 4);
    define(&quot;SUCCESS&quot;, true);
    define(&quot;FAIL&quot;, false);

    $data = array();
    $errors = array();
    $username = sanitize_text_field($_POST['username']);
    $email = sanitize_text_field($_POST['email']);
    $password = sanitize_text_field($_POST['password']);

    $data[&quot;username&quot;] = $username;
    $data[&quot;email&quot;] = $email;
    $data[&quot;password&quot;] = $password;

    if (!empty($username)) {
      if (username_exists($username)) {
        $errors[] = USERNAME_ALREADY_EXIST;
      }
    }

    if (!empty($email)) {
      if (!is_email($email)) {
        $errors[] = NOT_A_VALID_EMAIL_ADDRESS;
      }else{
        if (email_exists($email)) {
          $errors[] = EMAIL_ADDRESS_ALREADY_EXIST;
        }
      }
    }

    if (!empty($password)) {
      if (strlen($password) &amp;lt; 5) {
        $errors[] = PASSWORD_LENGTH_IS_TOO_SHORT;
      }
    }

    if (count($errors)) {
      $data[&quot;errors&quot;] = $errors;
      $data[&quot;result&quot;] = FAIL;
    }else{
      if (!empty($username) &amp;amp;&amp;amp; !empty($email) &amp;amp;&amp;amp; !empty($password)) {
        $random_password = wp_generate_password($length=12, $include_standard_special_chars=false);
        $userID = wp_create_user($username, $random_password, $email);
        if (!is_wp_error($user_id)) {
          wp_set_password($password, $userID);
          $data[&quot;result&quot;] = SUCCESS;
        }else{
          $data[&quot;result&quot;] = FAIL;
        }
      }else{
        $data[&quot;result&quot;] = FAIL;
      }
    }

    // return all our data to an AJAX call
    echo json_encode($data, JSON_PRETTY_PRINT);
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;One of the flaw that I would like to mention is. There wasn’t any validation to check if the user is a robot or not. User may type random things and create hundreds of account in WordPress which should not be use in production. Probably next time, I will have a tutorial about how to prevent robot register hundreds of account on your site.&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;Hopefully this guide has given you the confidence to create an account in WordPress programmatically. I hope that this post has helped you and thank you for reading!&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;p&gt;I’ll try to keep this list current and up to date. If you know of a great resource you’d like to share or notice a broken link, please &lt;a href=&quot;https://github.com/poanchen&quot;&gt;get in touch&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;getting-started&quot;&gt;Getting started&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.wordpress.org/reference/functions/wp_create_user/&quot;&gt;wp_create_user() code reference&lt;/a&gt; by &lt;a href=&quot;https://www.wordpress.org&quot;&gt;WordPress&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>
  
    <entry>
      <title>How to set up a Node.js application for production on Ubuntu 14.04?</title>
      <link href="https://poanchen.github.io/blog/2016/10/19/how-to-set-up-a-node.js-application-for-production-on-ubuntu-14.04"/>
      <updated>2016-10-19T00:00:00-07:00</updated>
      <id>https://poanchen.github.io//blog/2016/10/19/how-to-set-up-a-node.js-application-for-production-on-ubuntu-14.04</id>
      <content type="html">&lt;p&gt;You probably have heard of Node.js at some points in your life. Maybe it is at &lt;a href=&quot;http://stackoverflow.com/&quot;&gt;stack overflow&lt;/a&gt; or somewhere else. No surprise that Node.js became really popular as there are increasing interest in &lt;a href=&quot;http://githut.info/&quot;&gt;JavaScript&lt;/a&gt; on &lt;a href=&quot;https://github.com/&quot;&gt;Github&lt;/a&gt;. Normally, people use &lt;a href=&quot;https://en.wikipedia.org/wiki/HTML&quot;&gt;HTML&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Cascading_Style_Sheets&quot;&gt;CSS&lt;/a&gt;, and &lt;a href=&quot;https://www.javascript.com/&quot;&gt;JavaScript&lt;/a&gt; for front-end development. In the back-end, some popular programming languages like &lt;a href=&quot;https://secure.php.net/&quot;&gt;PHP&lt;/a&gt; on &lt;a href=&quot;https://wordpress.com/&quot;&gt;WordPress&lt;/a&gt; or &lt;a href=&quot;https://symfony.com/&quot;&gt;Symfony&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_(programming_language)&quot;&gt;Java&lt;/a&gt; on &lt;a href=&quot;https://spring.io/&quot;&gt;spring&lt;/a&gt; or &lt;a href=&quot;http://www.theserverside.com/definition/J2EE-Java-2-Platform-Enterprise-Edition&quot;&gt;J2EE&lt;/a&gt;, &lt;a href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt; on &lt;a href=&quot;https://www.djangoproject.com/&quot;&gt;django&lt;/a&gt; or &lt;a href=&quot;http://rubyonrails.org/&quot;&gt;Ruby on Rails&lt;/a&gt;. However, today we are going to talk about how to set up a Node.js application for production on Ubuntu 14.04 using &lt;a href=&quot;https://httpd.apache.org/&quot;&gt;Apache2&lt;/a&gt; server. Thanks to Chrome’s V8 JavaScript engine, as the runtime environment interprets JavaScript. It allows the developer to write JavaScript in the back-end. One benefit would be that normally a developer who came from front-end who already knew JavaScript can easily pick up and implement a back end system using JavaScript and do not need to know other languages like frameworks that we talked about above. In this tutorial, we will cover setting up a production-ready Node.js environment that is composed of two Ubuntu 14.04 servers; one server will run Node.js applications managed by &lt;a href=&quot;http://pm2.keymetrics.io/&quot;&gt;PM2&lt;/a&gt;, while the other will provide users with access to the application through an Apache2 reverse proxy to the application server. This guide uses two Ubuntu 14.04 servers with private networking in the same server. For simplicity, we also assume that you already have a domain name that points to your web server, so that you may access your web server via a domain name instead of its public IP address. Once you have those set up, then we may continue on this tutorial. We all know that in the local development for Node.js, we usually make a few changes along the way and simply uses the localhost IP address, i.e. 127.0.0.1, wherever the app server’s private IP address is used. Here, is the simplest hello world version of Node.js with &lt;a href=&quot;http://expressjs.com/&quot;&gt;Express&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;hello-world-version-of-nodejs-nbspnbspa-hrefhttpsgithubcompoanchencode-for-blogblobmaster20161019how-to-set-up-a-nodejs-application-for-production-on-ubuntu-1404serverjs-targetblanksource-codea&quot;&gt;Hello world version of Node.js   &lt;a href=&quot;https://github.com/poanchen/code-for-blog/blob/master/2016/10/19/how-to-set-up-a-node.js-application-for-production-on-ubuntu-14.04/server.js&quot; target=&quot;_blank&quot;&gt;source code&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;javascript&quot;&gt;
    var express = require('express');
    var app = express();

    app.get('/', function (request, response) {
      response.send(&quot;Hello World&quot;);
    });

    app.listen(8080);
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;When you run it, you should see something like this,&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016/10/19/how-to-set-up-a-node.js-application-for-production-on-ubuntu-14.04/hello world of nodejs.PNG&quot; alt=&quot;chat example for hello world version&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This Node.js application simply listens on the specified IP address and port, and returns “Hello World” with a 200 HTTP status code. This means that the application is only reachable from servers on the same private network, such as our web server. Let’s test the application through the private IP address. Open another a terminal session and connect to your web server. Because the web server is on the same private network, it should be able to reach the private IP address of the application using curl. Be sured to change the PRIVATE_IP_ADDRESS to your private IP address and PORT_THAT_Node_JS_APP_LISTEN if you changed to something else.&lt;/p&gt;

&lt;h2 id=&quot;curl-to-your-nodejs-application-via-private-ip-address&quot;&gt;curl to your Node.js application via private IP address&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;html&quot;&gt;
    curl http://PRIVATE_IP_ADDRESS:PORT_THAT_Node_JS_APP_LISTEN
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This should return Hello World! Once this is good. Then, we may proceed and install PM2. Now, we will install PM2, which is a process manager for Node.js application that is running, and configured to listen on the proper IP address and port your specify earlier. And, we will be using &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; to install our PM2.&lt;/p&gt;

&lt;h2 id=&quot;installing-pm2-using-npm&quot;&gt;installing PM2 using npm&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;html&quot;&gt;
    sudo pm2 install pm2 -g
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Once this is installed, then we may use PM2 to start a Node.js as simple as this, also be sured to replaced YOUR_NODE_JS_SERVER_NAME_FILE with the name of the Node.js server file you named.&lt;/p&gt;

&lt;h2 id=&quot;start-nodejs-application-with-pm2&quot;&gt;start Node.js application with PM2&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;html&quot;&gt;
    sudo pm2 YOUR_NODE_JS_SERVER_NAME_FILE.js
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Then, you should be able to see that PM2 is now running. You may use the following command to check if the Node.js application is running or not via PM2.&lt;/p&gt;

&lt;h2 id=&quot;check-if-nodejs-application-is-running-or-not-with-pm2&quot;&gt;check if Node.js application is running or not with PM2&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;html&quot;&gt;
    sudo pm2 list
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now, you should be able to see your application is running in that output from the command above.&lt;br /&gt;Normally, PM2 will restart automatically if the application crashes or is killed (thanks to PM2), but additonal step need to get the application running again if the web server boot or reboot itself. Hence, be sured to run the following command, so that your PM2 will restart your node.js application say one day you reboot your web server.&lt;/p&gt;

&lt;h2 id=&quot;run-the-command-so-that-one-day-when-you-reboot-your-web-server-the-pm2-will-automatically-restart-your-nodejs-application&quot;&gt;run the command so that one day when you reboot your web server, the PM2 will automatically restart your Node.js application&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;html&quot;&gt;
    sudo pm2 startup ubuntu
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Once this is done, then we may proceed and set up a reverse proxy server so that we can access our Node.js application via the domain name that you have. In order for this to work, you need to have Apache2 installed in your web server and it can be achieved like this,&lt;/p&gt;

&lt;h2 id=&quot;installing-apache2-on-a-web-server-via-a-command-line&quot;&gt;installing Apache2 on a web server via a command line&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;html&quot;&gt;
    sudo apt-get update
    sudo apt-get install apache2
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Then, you may use the following command to see if it is running,&lt;/p&gt;

&lt;h2 id=&quot;checking-if-apache2-is-running&quot;&gt;checking if Apache2 is running&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;html&quot;&gt;
    sudo service apache2 status
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;It should print something like apache2 is running. If it is not already running, use the following command to start the Apache2,&lt;/p&gt;

&lt;h2 id=&quot;start-the-apache2-server&quot;&gt;start the Apache2 server&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;html&quot;&gt;
    sudo service apache2 start
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now, we need to go to Apache2 folder and insert the following configuration for the Apache2 server to work with PM2. Do the following command to get to Apache2 folder and modify the following file,&lt;/p&gt;

&lt;h2 id=&quot;about-to-make-changes-to-the-config-file-for-apache2-so-that-we-may-access-nodejs-application-via-a-domain-name&quot;&gt;about to make changes to the config file for Apache2, so that we may access Node.js application via a domain name&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;html&quot;&gt;
    cd /etc/apache2/sites-enabled/
    sudo vi 000-default.conf
  &lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;add-the-following-configuration-in-the-000-defaultconf-file-nbspnbspa-hrefhttpsgithubcompoanchencode-for-blogblobmaster20161019how-to-set-up-a-nodejs-application-for-production-on-ubuntu-1404000-defaultconf-targetblanksource-codea&quot;&gt;add the following configuration in the 000-default.conf file   &lt;a href=&quot;https://github.com/poanchen/code-for-blog/blob/master/2016/10/19/how-to-set-up-a-node.js-application-for-production-on-ubuntu-14.04/000-default.conf&quot; target=&quot;_blank&quot;&gt;source code&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;apache&quot;&gt;
    &amp;lt;VirtualHost *:80&amp;gt;
      ServerAdmin webmaster@localhost
      ServerName THIS_IS_WHERE_YOU_PUT_YOUR_DOMAIN_NAME_HERE

      ProxyRequests off

      &amp;lt;Proxy *&amp;gt;
        Order deny,allow
        Allow from all
      &amp;lt;/Proxy&amp;gt;

      &amp;lt;Location /&amp;gt;
        ProxyPass http://PRIVATE_IP_ADDRESS:PORT_THAT_Node_JS_APP_LISTEN/
        ProxyPassReverse http://PRIVATE_IP_ADDRESS:PORT_THAT_Node_JS_APP_LISTEN/
      &amp;lt;/Location&amp;gt;
    &amp;lt;/VirtualHost&amp;gt;
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now, we need to restart the Apache2 server to take effect.&lt;/p&gt;

&lt;h2 id=&quot;restart-your-apache2-server&quot;&gt;restart your Apache2 server&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;html&quot;&gt;
    sudo service apache2 restart
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Assume that your Node.js application is running using PM2, and your application and Apache2 configuration are correct, you should now be able to access your application via the reverse proxy of the web server. Try it out by accessing your web server with the domain name that you have (the one you put in the Apache2 config file).&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;Hopefully this guide has given you the confidence to do configuration setting with running Node.js application using PM2, and access the application via a reverse proxy of the web server with Apache2. If you would like to learn more and do this in &lt;a href=&quot;https://www.nginx.com/&quot;&gt;Nginx way&lt;/a&gt;, please go &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-set-up-a-node-js-application-for-production-on-ubuntu-14-04&quot;&gt;here&lt;/a&gt;. As our tutorial is greatly inspired from it. I am sure that with this guide, you will now be more comfortable with doing the server side configuration with your Node.js application and Apache2 server on Ubuntu 14.04. I hope that this post has helped you and thank you for reading!&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;p&gt;I’ll try to keep this list current and up to date. If you know of a great resource you’d like to share or notice a broken link, please &lt;a href=&quot;https://github.com/poanchen&quot;&gt;get in touch&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;getting-started&quot;&gt;Getting started&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tags/node-js?type=tutorials&quot;&gt;How to set up Node.js on various kind of server&lt;/a&gt; by &lt;a href=&quot;https://www.digitalocean.com/&quot;&gt;DigitalOcean&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>
  
    <entry>
      <title>How to build a simple chat bot using Hubot that determine gender based on their first name?</title>
      <link href="https://poanchen.github.io/blog/2016/10/18/how-to-build-a-simple-chat-bot-using-hubot-that-determine-gender-based-on-name"/>
      <updated>2016-10-18T00:00:00-07:00</updated>
      <id>https://poanchen.github.io//blog/2016/10/18/how-to-build-a-simple-chat-bot-using-hubot-that-determine-gender-based-on-name</id>
      <content type="html">&lt;p&gt;Today, I am going to teach you guys how to build a chat bot using Hubot. So, what is a Hubot? Hubot is a chat bot, modeled after GitHub’s Campfire bot. He is really cool. He can do a lot of things. For example, sending a message to someone as soon as they enter the chat room, or queries for the status of AWS services, or automate your deployment process, or display app performace status from New Relic, or warn the developer whenever a build failed in git, and many more! He is &lt;a href=&quot;https://hubot.github.com/docs/#scripts&quot;&gt;extendable with scripts&lt;/a&gt; and can work on &lt;a href=&quot;https://hubot.github.com/docs/adapters/&quot;&gt;many different chat services&lt;/a&gt;. In order to keep this post short and simple, we are not going to cover how to install hubot on your machine. Instead, we are going straight into the implementation on how to build a simple chat bot using Hubot. For people who aren’t familar with setting up the environment for hubot, you may check out &lt;a href=&quot;https://youtu.be/A7fh6RIzGrw?t=5m15s&quot;&gt;this YouTube video&lt;/a&gt; as it gives step by step on how to install hubot from scratch. Okay, that’s get it started. The following code is the hello world version of using Hubot.&lt;/p&gt;

&lt;h2 id=&quot;hello-world-version-of-hubot&quot;&gt;Hello world version of Hubot&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;coffeescript&quot;&gt;
    module.exports = (robot) -&amp;gt;
      robot.hear /hi/i, (res) -&amp;gt;
        res.send &quot;Hello there&quot;
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In the chat room, a possible chat would be like this,&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016/10/18/how-to-build-a-simple-chat-bot-using-hubot-that-determine-gender-based-on-name/hubot-1-ex.PNG&quot; alt=&quot;chat example for hello world version&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Pretty simple hul?!&lt;br /&gt;
But, I have a question through. Is it possible that Hubot can grab what I just typed like when I said “hi Hubot”, can the Hubot get the word “Hubot”? &lt;br /&gt;Yes, indeed. You can do that. Just watch!&lt;/p&gt;

&lt;h2 id=&quot;example-on-how-to-pass-parameter-to-hubot&quot;&gt;Example on how to pass parameter to hubot&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;coffeescript&quot;&gt;
    module.exports = (robot) -&amp;gt;
      robot.hear /hi hubot my name is (.*)/i, (res) -&amp;gt;
        personName = escape(res.match[1])
        res.send &quot;Hello &quot; + personName
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In the chat room, a possible chat would be like this,&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016/10/18/how-to-build-a-simple-chat-bot-using-hubot-that-determine-gender-based-on-name/hubot-2-ex.PNG&quot; alt=&quot;chat example for pass parameter to hubot&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Not bad hul?!&lt;br /&gt;
Okay, now before we begin. I would like to introduce an amazing REST API that we will be using is called Genderize.io. A REST API that determines the gender of a first name which will help us to make this tutorial a lot easier. Thanks to &lt;a href=&quot;https://genderize.io/&quot;&gt;Genderize.io&lt;/a&gt;. The REST API that we will be calling is &lt;strong&gt;https://api.genderize.io&lt;/strong&gt;. An example on how this would be used.&lt;/p&gt;

&lt;h2 id=&quot;example-on-get-request-to-httpsapigenderizeio&quot;&gt;Example on GET request to https://api.genderize.io&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;html&quot;&gt;
    GET https://api.genderize.io/?name=peter
  &lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;example-on-the-response-for-httpsapigenderizeionamepeter&quot;&gt;Example on the response for https://api.genderize.io/?name=peter&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;json&quot;&gt;
    {&quot;name&quot;:&quot;peter&quot;,&quot;gender&quot;:&quot;male&quot;,&quot;probability&quot;:&quot;1.00&quot;,&quot;count&quot;:796}
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now, with this REST API. We can easily build a Hubot that allow the user to ask them if a given first name is a male or a female.&lt;/p&gt;

&lt;h2 id=&quot;example-on-calling-a-get-request-in-hubot-nbspnbspa-hrefhttpsgithubcompoanchencode-for-blogblobmaster20161018how-to-build-a-simple-chat-bot-using-hubot-that-determine-gender-based-on-namechatbotthatdeterminegenderbasedonnamecoffee-targetblanksource-codea&quot;&gt;Example on calling a GET request in Hubot   &lt;a href=&quot;https://github.com/poanchen/code-for-blog/blob/master/2016/10/18/how-to-build-a-simple-chat-bot-using-hubot-that-determine-gender-based-on-name/chatbotThatDetermineGenderBasedOnName.coffee&quot; target=&quot;_blank&quot;&gt;source code&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;coffeescript&quot;&gt;
    module.exports = (robot) -&amp;gt;
      robot.hear /check gender for (.*)/i, (res) -&amp;gt;
        personName = escape(res.match[1])
        res.http(&quot;https://api.genderize.io/?name=&quot; + personName)
          .get() (error, response, body) -&amp;gt;
          try
            json = JSON.parse(body)
            res.send &quot;Probability of &quot; + &quot;#{json.probability}&quot; + &quot; that &quot; + personName + &quot; is a &quot; + &quot;#{json.gender}.\n&quot;
          catch error
            res.send &quot;something went wrong...&quot;
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In the chat room, a possible chat would be like this,&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016/10/18/how-to-build-a-simple-chat-bot-using-hubot-that-determine-gender-based-on-name/hubot-3-ex.PNG&quot; alt=&quot;chat example for checking gender for peter&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;or&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016/10/18/how-to-build-a-simple-chat-bot-using-hubot-that-determine-gender-based-on-name/hubot-4-ex.PNG&quot; alt=&quot;chat example for checking gender for belle&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Normally, the higher the probability, the greater chance that the response is correct!&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;Hopefully this guide has given you the confidence to do things with Hubot. If you would like to learn more, please go to their &lt;a href=&quot;https://hubot.github.com/docs/scripting/&quot;&gt;offical site for more example&lt;/a&gt;. I am sure that you will start getting the hang of it while you start playing around with Hubot. I hope that this post has helped you and thank you for reading!&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;p&gt;I’ll try to keep this list current and up to date. If you know of a great resource you’d like to share or notice a broken link, please &lt;a href=&quot;https://github.com/poanchen&quot;&gt;get in touch&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;getting-started&quot;&gt;Getting started&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hubot.github.com/docs/&quot;&gt;Getting Started With Hubot&lt;/a&gt; by &lt;a href=&quot;https://hubot.github.com/&quot;&gt;Hubot&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/hubot-scripts&quot;&gt;More examples on Hubot&lt;/a&gt; by &lt;a href=&quot;https://hubot.github.com/&quot;&gt;Hubot&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>
  
    <entry>
      <title>How to automatically send a welcome email to new user when they sign up for their account in WordPress programmatically?</title>
      <link href="https://poanchen.github.io/blog/2016/10/17/how-to-automatically-send-welcome-email-to-user-when-they-sign-up-in-wp"/>
      <updated>2016-10-17T00:00:00-07:00</updated>
      <id>https://poanchen.github.io//blog/2016/10/17/how-to-automatically-send-welcome-email-to-user-when-they-sign-up-in-wp</id>
      <content type="html">&lt;p&gt;Nowadays, it is no surprise that user will usually receive an email when they first sign up for a new account with a site. It could be a greeting email or a confirmation email. Either way, this should be done automatically in the background. Imagine that a person in the back-end who needs to send an email to user every time when there is a new register. This could be a lot of work depends on the popularity of the site. Today, we are going to talk about how we can achieve that in WordPress. WordPress is a free and open-source content management system (CMS) based on PHP and MySQL. According to &lt;a href=&quot;https://trends.builtwith.com/cms&quot;&gt;CMS Usage Statistics&lt;/a&gt;, it is reportedly the most popular blogging system in use on the web and it powers 26% of the website on the internet. &lt;a href=&quot;https://w3techs.com/technologies/details/cm-wordpress/all/all&quot;&gt;really?&lt;/a&gt; One of the amazing feature that came pre-installed with WordPress is the ability to have multiple users, as an administrator of a WordPress site, you can set-up multiple users for the website and assign access levels and capabilities to each other. For example, you can assign role like editor to a specific person so that they can publish and manage all the posts on your site. But, who does not have the ability to install a new plugin on the site. If you would like to know all the roles that are available on pre-installed WordPress, please go ahead to their official site to &lt;a href=&quot;https://codex.wordpress.org/Roles_and_Capabilities&quot;&gt;check it out&lt;/a&gt;. After hearing many great things about WordPress, lets get to the point and start coding! Since WordPress is based on PHP in the back-end, we are going to code in PHP. If you do not know what a PHP is, you should take a look at some really basic things that can be done using PHP. &lt;a href=&quot;http://www.w3schools.com/php/default.asp&quot;&gt;PHP 5 tutorial&lt;/a&gt; by &lt;a href=&quot;http://www.w3schools.com/&quot;&gt;w3school.com&lt;/a&gt;. Beside PHP, we are going to use what so-called actions in WordPress. Actions are triggered by specific events that take place in WordPress, such as publishing a post, a new user sign up, or a user resetted their password for their account. An action is a custom PHP function defined in your plugin (or theme) and hooked, i.e. set to respond to specific event trigger by user. This is especially useful for programmer to write a clean and maintainable PHP code in WordPress. Which is again, another great feature came with WordPress. For more information about action in WordPress, please go to this &lt;a href=&quot;https://codex.wordpress.org/Plugin_API&quot;&gt;site&lt;/a&gt;. The first step in creating an action in WordPress is to create a PHP function with the functionality that you want. In this case, we are going to write a PHP function that send a welcome email to user when this function get triggered. The code can be seen as follows,
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;php-code-for-writing-a-function-that-send-a-welcome-email-to-user&quot;&gt;PHP code for writing a function that send a welcome email to user&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;php&quot;&gt;
    function send_welcome_email_to_new_user($user_id) {
      $user = get_userdata($user_id);
      $user_email = $user-&amp;gt;user_email;
      // for simplicity, lets assume that user has typed their first and last name when they sign up
      $user_full_name = $user-&amp;gt;user_firstname . $user-&amp;gt;user_lastname;

      // Now we are ready to build our welcome email
      $to = $user_email;
      $subject = &quot;Hi &quot; . $user_full_name . &quot;, welcome to our site!&quot;;
      $body = '
                &amp;lt;h1&amp;gt;Dear ' . $user_full_name . ',&amp;lt;/h1&amp;gt;&amp;lt;/br&amp;gt;
                &amp;lt;p&amp;gt;Thank you for joining our site. Your account is now active.&amp;lt;/p&amp;gt;
                &amp;lt;p&amp;gt;Please go ahead and navigate around your account.&amp;lt;/p&amp;gt;
                &amp;lt;p&amp;gt;Let me know if you have further questions, I am here to help.&amp;lt;/p&amp;gt;
                &amp;lt;p&amp;gt;Enjoy the rest of your day!&amp;lt;/p&amp;gt;
                &amp;lt;p&amp;gt;Kind Regards,&amp;lt;/p&amp;gt;
                &amp;lt;p&amp;gt;poanchen&amp;lt;/p&amp;gt;
      ';
      $headers = array('Content-Type: text/html; charset=UTF-8');
      if (wp_mail($to, $subject, $body, $headers)) {
        error_log(&quot;email has been successfully sent to user whose email is &quot; . $user_email);
      }else{
        error_log(&quot;email failed to sent to user whose email is &quot; . $user_email);
      }
    }
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The above code should be fairly simple. We are using WordPress built-in function to send an email. For more information about it, please go to this &lt;a href=&quot;https://developer.wordpress.org/reference/functions/wp_mail/&quot;&gt;site&lt;/a&gt;. Another thing that I would like to add is, in order to see the error message. You must set your WP_DEBUG_LOG to true in your wp-config.php file. On instruction on how to turn it on, please go to this &lt;a href=&quot;https://premium.wpmudev.org/blog/debugging-wordpress-how-to-use-wp_debug&quot;&gt;site&lt;/a&gt; by &lt;a href=&quot;https://premium.wpmudev.org/&quot;&gt;WPMU DEV&lt;/a&gt;. &lt;strong&gt;Don’t forget that WP_DEBUG is for local development use and should not be used on production.&lt;/strong&gt; The following example that I would like to show is hook this function up with an action provided by WordPress. In this way, whenever there is a new user sign up, this function will get called automatically.&lt;/p&gt;

&lt;h2 id=&quot;full-php-code-for-sending-a-welcome-email-to-user-nbspnbspa-hrefhttpsgithubcompoanchencode-for-blogblobmaster20161017how-to-automatically-send-welcome-email-to-user-when-they-sign-up-in-wpfunctionsphp-targetblanksource-codea&quot;&gt;Full PHP code for sending a welcome email to user   &lt;a href=&quot;https://github.com/poanchen/code-for-blog/blob/master/2016/10/17/how-to-automatically-send-welcome-email-to-user-when-they-sign-up-in-wp/functions.php&quot; target=&quot;_blank&quot;&gt;source code&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;php&quot;&gt;
    function send_welcome_email_to_new_user($user_id) {
      $user = get_userdata($user_id);
      $user_email = $user-&amp;gt;user_email;
      // for simplicity, lets assume that user has typed their first and last name when they sign up
      $user_full_name = $user-&amp;gt;user_firstname . $user-&amp;gt;user_lastname;

      // Now we are ready to build our welcome email
      $to = $user_email;
      $subject = &quot;Hi &quot; . $user_full_name . &quot;, welcome to our site!&quot;;
      $body = '
                &amp;lt;h1&amp;gt;Dear ' . $user_full_name . ',&amp;lt;/h1&amp;gt;&amp;lt;/br&amp;gt;
                &amp;lt;p&amp;gt;Thank you for joining our site. Your account is now active.&amp;lt;/p&amp;gt;
                &amp;lt;p&amp;gt;Please go ahead and navigate around your account.&amp;lt;/p&amp;gt;
                &amp;lt;p&amp;gt;Let me know if you have further questions, I am here to help.&amp;lt;/p&amp;gt;
                &amp;lt;p&amp;gt;Enjoy the rest of your day!&amp;lt;/p&amp;gt;
                &amp;lt;p&amp;gt;Kind Regards,&amp;lt;/p&amp;gt;
                &amp;lt;p&amp;gt;poanchen&amp;lt;/p&amp;gt;
      ';
      $headers = array('Content-Type: text/html; charset=UTF-8');
      if (wp_mail($to, $subject, $body, $headers)) {
        error_log(&quot;email has been successfully sent to user whose email is &quot; . $user_email);
      }else{
        error_log(&quot;email failed to sent to user whose email is &quot; . $user_email);
      }
    }

    // THE ONLY DIFFERENCE IS THIS LINE
    add_action('user_register', 'send_welcome_email_to_new_user');
    // THE ONLY DIFFERENCE IS THIS LINE
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;By hooking this function up with the action ‘user_register’, all we need to do is add one line of code and we are done. (please make sure you put this function into the core functions.php in your theme folder in order for it to work!).&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;Hopefully this guide has given you the confidence to do things with WordPress Action. Please go ahead and take a look at the &lt;a href=&quot;https://codex.wordpress.org/Plugin_API/Action_Reference&quot;&gt;list of all WordPress hook&lt;/a&gt; that they have offer. I am sure that you will start getting the hang of it while you start to implement more function that hooked up with the WordPress Action. I hope that this post has helped you and good luck to you!&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;p&gt;I’ll try to keep this list current and up to date. If you know of a great resource you’d like to share or notice a broken link, please &lt;a href=&quot;https://github.com/poanchen&quot;&gt;get in touch&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;wordpress-official-site-for-developer&quot;&gt;WordPress official site for developer&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://wordpress.org/&quot;&gt;WordPress.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>
  
    <entry>
      <title>How to create a simple REST API in PHP and call them in JavaScript</title>
      <link href="https://poanchen.github.io/blog/2016/10/16/how-to-create-simple-rest-api-in-php-and-call-them-in-js"/>
      <updated>2016-10-16T00:00:00-07:00</updated>
      <id>https://poanchen.github.io//blog/2016/10/16/how-to-create-simple-rest-api-in-php-and-call-them-in-js</id>
      <content type="html">&lt;p&gt;In this post, we are going to talk about how we can create a simple REST API in PHP and call them in JavaScript using various technologies. For example, using &lt;strong&gt;XMLHttpRequest&lt;/strong&gt;, &lt;strong&gt;jQuery AJAX&lt;/strong&gt; and &lt;strong&gt;AngularJS AJAX&lt;/strong&gt;. In order to create a simple REST API that might actually be used in practice, we are going to use WordPress API namely the &lt;a href=&quot;https://codex.wordpress.org/Function_Reference/username_exists&quot;&gt;username_exists()&lt;/a&gt; function that allow us to check if the username exist in a WordPress database and return true if the username exists or false otherwise. For simplicity, we are going to skip on how to build a WordPress site, and go straight to writing the PHP code for the simple REST API.
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;php-code-for-simple-rest-api-nbspnbspa-hrefhttpsgithubcompoanchencode-for-blogblobmaster20161016how-to-create-simple-rest-api-in-php-and-call-them-in-jscheckifusernameexistphp-targetblanksource-codea&quot;&gt;PHP code for simple REST API   &lt;a href=&quot;https://github.com/poanchen/code-for-blog/blob/master/2016/10/16/how-to-create-simple-rest-api-in-php-and-call-them-in-js/checkIfUsernameExist.php&quot; target=&quot;_blank&quot;&gt;source code&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;php&quot;&gt;
    // Include the wp-load.php so that we can use username_exists() function in WordPress API
    $parse_uri = explode( 'wp-content', $_SERVER['SCRIPT_FILENAME'] );
    require_once( $parse_uri[0] . 'wp-load.php' );

    $data = array();
    $username = sanitize_text_field($_POST['username']);

    if (username_exists($username)) {
      $data[&quot;username&quot;] = $username;
      $data[&quot;result&quot;] = true;
    }else {
      $data[&quot;username&quot;] = $username;
      $data[&quot;result&quot;] = false;
    }

    // return all our data to an AJAX call
    echo json_encode($data, JSON_PRETTY_PRINT);
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Live link are &lt;a href=&quot;https://www.jenrenalcare.com/upload/poanchen.github.io/sample-code/2016/10/16/how-to-create-simple-rest-api-in-php-and-call-them-in-js/checkIfUsernameExist.php&quot;&gt;here&lt;/a&gt;.&lt;br /&gt;
An example of a response from this simple REST API is as follows, or you may click the link above. (Notice that the request would have to be POST, you may test it out using &lt;a href=&quot;https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?hl=en&quot;&gt;Postman&lt;/a&gt;.)&lt;/p&gt;
&lt;pre&gt;
  &lt;code class=&quot;json&quot;&gt;
    { &quot;username&quot;: &quot;poanchen&quot;, &quot;result&quot;: false }
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In this way, now we have a really simple REST API that allow us to check if the username exist or not. This is especially useful in registration form where we allow the user to know if the username exist or not before they submit the form. This can be done using JavaScript. First example that I would like to show is using &lt;strong&gt;XMLHttpRequest&lt;/strong&gt;. Here is a sample code that does the job.&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;code-for-using-xmlhttprequest-nbspnbspa-hrefhttpsgithubcompoanchencode-for-blogblobmaster20161016how-to-create-simple-rest-api-in-php-and-call-them-in-jscheckifusernameexistxmlhtml-targetblanksource-codea&quot;&gt;Code for using XMLHttpRequest   &lt;a href=&quot;https://github.com/poanchen/code-for-blog/blob/master/2016/10/16/how-to-create-simple-rest-api-in-php-and-call-them-in-js/checkIfUsernameExistXML.html&quot; target=&quot;_blank&quot;&gt;source code&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;html&quot;&gt;
    &amp;lt;input type=&quot;text&quot; id=&quot;username&quot; name=&quot;username&quot; placeholder=&quot;username&quot;&amp;gt;
    &amp;lt;p id=&quot;usernameResult&quot;&amp;gt;&amp;lt;/p&amp;gt;

    &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
      var usernameSelected = document.getElementById('username');
      var usernameWarning = document.getElementById('usernameResult');

      usernameSelected.addEventListener('keyup', function() {
        var request = new XMLHttpRequest();
        var url = &quot;https://www.jenrenalcare.com/upload/poanchen.github.io/sample-code/2016/10/16/how-to-create-simple-rest-api-in-php-and-call-them-in-js/checkIfUsernameExist.php&quot;;
        var params = &quot;username=&quot; + usernameSelected.value;

        request.open('POST', url, true);
        request.setRequestHeader(&quot;Content-type&quot;, &quot;application/x-www-form-urlencoded&quot;);
        request.onreadystatechange = function() {
          if (request.readyState === XMLHttpRequest.DONE) {
            if (request.status === 200) {
              var response = JSON.parse(request.response);
              if (response.result) {
                usernameWarning.innerHTML = &quot;The username you typed has been used!&quot;;
              }else{
                usernameWarning.innerHTML = &quot;You may freely use this username!&quot;;
              }
            }
          }
        };
        request.send(params);
      });
    &amp;lt;/script&amp;gt;
  &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;https://codepen.io/poanchen/pen/MbJNod?editors=101&quot; target=&quot;_blank&quot;&gt;
  &lt;img src=&quot;https://blog.codepen.io/wp-content/uploads/2012/06/TryItOn-CodePen.svg&quot; width=&quot;150&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Live link are &lt;a href=&quot;https://www.jenrenalcare.com/upload/poanchen.github.io/sample-code/2016/10/16/how-to-create-simple-rest-api-in-php-and-call-them-in-js/checkIfUsernameExistXML.html&quot;&gt;here&lt;/a&gt;.&lt;br /&gt;
As the user type, they may immediately see if the username is taken or not. An example of taken username is ‘test’!&lt;br /&gt;
Another example that I would like to show is using &lt;strong&gt;jQuery AJAX&lt;/strong&gt;. Here is a sample code that does the job.&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;code-for-using-jquery-ajax-nbspnbspa-hrefhttpsgithubcompoanchencode-for-blogblobmaster20161016how-to-create-simple-rest-api-in-php-and-call-them-in-jscheckifusernameexistjqueryhtml-targetblanksource-codea&quot;&gt;Code for using jQuery AJAX   &lt;a href=&quot;https://github.com/poanchen/code-for-blog/blob/master/2016/10/16/how-to-create-simple-rest-api-in-php-and-call-them-in-js/checkIfUsernameExistJquery.html&quot; target=&quot;_blank&quot;&gt;source code&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;html&quot;&gt;
    &amp;lt;input type=&quot;text&quot; id=&quot;username&quot; name=&quot;username&quot; placeholder=&quot;username&quot;&amp;gt;
    &amp;lt;p id=&quot;usernameResult&quot;&amp;gt;&amp;lt;/p&amp;gt;

    &amp;lt;script src=&quot;//ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
      $(document).ready(function () {
        var usernameSelected = $('#username');
        var usernameWarning = $('#usernameResult');

        usernameSelected.keyup(function() {
          var url = &quot;https://www.jenrenalcare.com/upload/poanchen.github.io/sample-code/2016/10/16/how-to-create-simple-rest-api-in-php-and-call-them-in-js/checkIfUsernameExist.php&quot;;
          var formData = {
            'username' : usernameSelected.val()
          };

          $.ajax({
            type : 'POST',
            url : url,
            data : formData,
            dataType : 'JSON',
            encode : true,
            success: function (response, status, xhr) {
              if (response.result) {
                usernameWarning.html(&quot;The username you typed has been used!&quot;);
              }else{
                usernameWarning.html(&quot;You may freely use this username!&quot;);
              }
            },
            error: function (xhr, status, error) {
              usernameWarning.html(&quot;Something went wrong!&quot;);
            }
          });
        });
     });
    &amp;lt;/script&amp;gt;
  &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;https://codepen.io/poanchen/pen/eBgqwJ?editors=101&quot; target=&quot;_blank&quot;&gt;
  &lt;img src=&quot;https://blog.codepen.io/wp-content/uploads/2012/06/TryItOn-CodePen.svg&quot; width=&quot;150&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Live link are &lt;a href=&quot;https://www.jenrenalcare.com/upload/poanchen.github.io/sample-code/2016/10/16/how-to-create-simple-rest-api-in-php-and-call-them-in-js/checkIfUsernameExistJquery.html&quot;&gt;here&lt;/a&gt;.&lt;br /&gt;
As the user type, they may immediately see if the username is taken or not. An example of taken username is ‘test’!&lt;br /&gt;
Another example that I would like to show is using &lt;strong&gt;AngularJS AJAX&lt;/strong&gt;. Here is a sample code that does the job.&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;code-for-using-angularjs-ajax-nbspnbspa-hrefhttpsgithubcompoanchencode-for-blogblobmaster20161016how-to-create-simple-rest-api-in-php-and-call-them-in-jscheckifusernameexistangularhtml-targetblanksource-codea&quot;&gt;Code for using AngularJS AJAX   &lt;a href=&quot;https://github.com/poanchen/code-for-blog/blob/master/2016/10/16/how-to-create-simple-rest-api-in-php-and-call-them-in-js/checkIfUsernameExistAngular.html&quot; target=&quot;_blank&quot;&gt;source code&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;
  &lt;code class=&quot;html&quot;&gt;
    &amp;lt;div ng-app=&quot;usernameApp&quot; ng-controller=&quot;usernameController&quot;&amp;gt;
      &amp;lt;input type=&quot;text&quot; ng-model=&quot;username&quot; ng-keyup=&quot;usernameKeyup()&quot; placeholder=&quot;username&quot;&amp;gt;
      &amp;lt;p&amp;gt;&amp;#123;&amp;#123; return_message &amp;#125;&amp;#125;&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;script src=&quot;//ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
      var usernameApp = angular.module('usernameApp', []);
      
      usernameApp.controller('usernameController', function ($scope, $http) {
        $scope.usernameKeyup = function() {
          $http.defaults.headers.post[&quot;Content-Type&quot;] = &quot;application/x-www-form-urlencoded&quot;;

          var url = &quot;https://www.jenrenalcare.com/upload/poanchen.github.io/sample-code/2016/10/16/how-to-create-simple-rest-api-in-php-and-call-them-in-js/checkIfUsernameExist.php&quot;;
          var formData = &quot;username=&quot; + $scope.username;

          $http.post(url, formData)
          .success(function (response, status, headers, config) {
            if (response.result) {
              $scope.return_message = &quot;The username you typed has been used!&quot;;
            }else{
              $scope.return_message = &quot;You may freely use this username!&quot;;
            }
          })
          .error(function (data, status, header, config) {
            $scope.return_message = &quot;Something went wrong!&quot;;
          });
        };
      });
    &amp;lt;/script&amp;gt;    
  &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;https://codepen.io/poanchen/pen/Lbxwwj?editors=101&quot; target=&quot;_blank&quot;&gt;
  &lt;img src=&quot;https://blog.codepen.io/wp-content/uploads/2012/06/TryItOn-CodePen.svg&quot; width=&quot;150&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Live link are &lt;a href=&quot;https://www.jenrenalcare.com/upload/poanchen.github.io/sample-code/2016/10/16/how-to-create-simple-rest-api-in-php-and-call-them-in-js/checkIfUsernameExistAngular.html&quot;&gt;here&lt;/a&gt;.&lt;br /&gt;
As the user type, they may immediately see if the username is taken or not. An example of taken username is ‘test’!&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;Hopefully this guide has given you the confidence to do many other things with querying a simple REST API using various technologies like pure JavaScript with XMLHttpRequest or AJAX call via jQuery or AngularJS AJAX. Please go ahead and take a look at the code and add more things to it to make it do more interesting things. I am sure that you will start getting the hang of it while you add those new things. I hope that this post has helped you and good luck to you!&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;p&gt;I’ll try to keep this list current and up to date. If you know of a great resource you’d like to share or notice a broken link, please &lt;a href=&quot;https://github.com/poanchen&quot;&gt;get in touch&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;wordpress-apis&quot;&gt;WordPress APIs&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://codex.wordpress.org/WordPress_APIs&quot;&gt;WordPress APIs « WordPress Codex&lt;/a&gt; by &lt;a href=&quot;https://wordpress.org/&quot;&gt;WordPress&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;rest-api&quot;&gt;REST API&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=7YcW25PHnAA&quot;&gt;REST API concepts and examples&lt;/a&gt; by &lt;a href=&quot;https://www.youtube.com/channel/UCV4-mrR8UZh6AsWZbmW5uhQ&quot;&gt;WebConcepts (YouTuber)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.sitepoint.com/developers-rest-api/&quot;&gt;Do you know what a REST API is? - SitePoint&lt;/a&gt; by &lt;a href=&quot;https://www.sitepoint.com/author/sdeering/&quot;&gt;Sam Deering&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;xmlhttprequest&quot;&gt;XMLHttpRequest&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.w3schools.com/xml/dom_http.asp&quot;&gt;XML DOM - HttpRequest object - W3Schools&lt;/a&gt; by &lt;a href=&quot;http://www.w3schools.com/&quot;&gt;W3Schools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;jquery-ajax&quot;&gt;jQuery AJAX&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://api.jquery.com/jquery.ajax/&quot;&gt;jQuery.ajax() - jQuery API Documentation&lt;/a&gt; by &lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;angularjs-ajax&quot;&gt;AngularJS AJAX&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.angularjs.org/api/ng/service/$http&quot;&gt;AngularJS Documentation for $http&lt;/a&gt; by &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>
  
    <entry>
      <title>PoAn (Baron) Chen, Launches Site</title>
      <link href="https://poanchen.github.io/blog/2016/10/15/poan-baron-chen-site-launched"/>
      <updated>2016-10-15T00:00:00-07:00</updated>
      <id>https://poanchen.github.io//blog/2016/10/15/poan-baron-chen-site-launched</id>
      <content type="html">&lt;p&gt;Well. Finally got around to putting this website together. Neat thing about it - powered by &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; and I can use Markdown to author my posts. It actually is a lot easier than I thought it was going to be.&lt;/p&gt;
</content>
    </entry>
  
</feed>